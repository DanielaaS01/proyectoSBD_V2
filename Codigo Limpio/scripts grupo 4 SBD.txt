------------------------------------------------   GRUPO 4   ------------------------------------------------

--INTEGRANTES:
-- Emmanuel Santiago  V-28.441.018
-- Samuel Velásquez   V-29.966.921
-- Daniela Silva      V-30.225.188



-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ================================== Tablas, secuencias y constrains ========================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------

                                                       --1--                                
-----------------------------------------------| LUGARES_GEOGRAFICOS |---------------------------------------------- 
CREATE SEQUENCE seq_id_lugar_geografico START 1;
CREATE TABLE LUGARES_GEOGRAFICOS(
    id_lugar INTEGER DEFAULT nextval('seq_id_lugar_geografico') CONSTRAINT pk_lugares PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    tipo CHAR(1) NOT NULL,  
    id_lugar_padre INTEGER
);   

ALTER TABLE LUGARES_GEOGRAFICOS
ADD CONSTRAINT check_tipo_lugar CHECK (tipo IN ('P', 'R', 'C')), -- 'P'=País, 'R'=Region, 'C'=Ciudad
ADD CONSTRAINT fk_lugar_padre FOREIGN KEY (id_lugar_padre) REFERENCES LUGARES_GEOGRAFICOS(id_lugar); 


                                                       --2--                              
-----------------------------------------------------| MUSEOS |--------------------------------------------------------------- 
CREATE SEQUENCE seq_id_museo START 1;

CREATE TABLE MUSEOS(
    id_museo INTEGER DEFAULT nextval('seq_id_museo') CONSTRAINT pk_museos PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    mision_proposito VARCHAR(450) NOT NULL,
    fecha_fundacion DATE NOT NULL,
    id_lugar INTEGER NOT NULL 
);

ALTER TABLE MUSEOS
ADD CONSTRAINT fk_museo_lugar FOREIGN KEY (id_lugar) REFERENCES LUGARES_GEOGRAFICOS(id_lugar),
ADD CONSTRAINT check_fecha_fundacion CHECK (fecha_fundacion <= CURRENT_DATE); -- La fecha de fundación no puede ser futura


                                                        --3--                                
-----------------------------------------------------| HORARIOS |------------------------------------------------------------- 
CREATE TABLE HORARIOS(
    id_museo INTEGER NOT NULL,
    dia INTEGER NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL    
);

ALTER TABLE HORARIOS
ADD CONSTRAINT pk_horarios PRIMARY KEY (id_museo, dia),
ADD CONSTRAINT check_dia CHECK (dia BETWEEN 1 AND 7), -- 1=lunes, 2=martes, ..., 7=domingo
ADD CONSTRAINT fk_museo_horario FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT check_hora_inicio_fin CHECK (hora_inicio < hora_fin); -- La hora de inicio debe ser menor que la de fin


                                                        --4--                                
---------------------------------------------------| TIPOS_TICKETS |------------------------------------------------------------------------
CREATE TABLE TIPOS_TICKETS(
    id_museo INTEGER NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE,
    precio NUMERIC NOT NULL,
    tipo CHAR(1) NOT NULL   
);

ALTER TABLE TIPOS_TICKETS
ADD CONSTRAINT pk_tipos_tickets PRIMARY KEY (id_museo, fecha_inicio),
ADD CONSTRAINT fk_tipo_ticket_museo FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT check_tipo_ticket CHECK (tipo IN ('G', 'R', 'E')),  -- G: General, R: Reducida, E: Exonerada
ADD CONSTRAINT check_ticket_fechas CHECK (fecha_fin >= fecha_inicio);


                                                        --5--                                
-----------------------------------------------------| ENTRADAS |------------------------------------------------------------- 
CREATE SEQUENCE seq_num_ticket START 1;
CREATE TABLE ENTRADAS(
    id_museo INTEGER NOT NULL,
    numero_ticket INTEGER DEFAULT nextval('seq_num_ticket')  NOT NULL,
    fecha_hora_emision TIMESTAMP NOT NULL,
    monto NUMERIC NOT NULL,
    tipo CHAR(1) NOT NULL   
);

ALTER TABLE ENTRADAS
ADD CONSTRAINT check_entradas_tipo CHECK (tipo IN ('G', 'R')), -- 'G'=General, 'R'=Reducida   
ADD CONSTRAINT pk_entradas PRIMARY KEY (id_museo, numero_ticket),
ADD CONSTRAINT fk_entrada_museo FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT check_monto CHECK (monto > 0); -- El monto no puede ser negativo


                                                        --6--                                
-----------------------------------------------| ESTRUCTURAS_FISICAS |--------------------------------------------------------
CREATE SEQUENCE seq_id_estructura_fis START WITH 1;
CREATE TABLE ESTRUCTURAS_FISICAS(
    id_museo INTEGER NOT NULL,
    id_estructura_fis INTEGER DEFAULT nextval('seq_id_estructura_fis') NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    tipo CHAR(1) NOT NULL,
    descripcion VARCHAR(300), 
    direccion VARCHAR(400),
    id_museo_padre INTEGER, 
    id_padre INTEGER
);

ALTER TABLE ESTRUCTURAS_FISICAS
ADD CONSTRAINT pk_estructuras_fisicas PRIMARY KEY (id_museo, id_estructura_fis),
ADD CONSTRAINT check_tipo_estructura CHECK (tipo IN ('E', 'P')), -- 'E'=Edificio, 'P'=Piso
ADD CONSTRAINT fk_estructura_fisica_padre FOREIGN KEY (id_museo_padre, id_padre) REFERENCES ESTRUCTURAS_FISICAS(id_museo, id_estructura_fis),
ADD CONSTRAINT fk_estructuras_museo FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo);


                                                        --7--                                
----------------------------------------------------| SALAS_EXP |-------------------------------------------------------------
CREATE SEQUENCE seq_id_salas_exp START WITH 1;
CREATE TABLE SALAS_EXP (
    id_museo INTEGER NOT NULL,
    id_estructura_fis INTEGER NOT NULL,
    id_sala INTEGER DEFAULT nextval('seq_id_salas_exp') NOT NULL,
    nombre VARCHAR(100),
    descripcion VARCHAR(300)
);

ALTER TABLE SALAS_EXP
ADD CONSTRAINT pk_salas_exp PRIMARY KEY (id_museo, id_estructura_fis, id_sala),
ADD CONSTRAINT fk_salas_estructura_fisica FOREIGN KEY (id_museo, id_estructura_fis) REFERENCES ESTRUCTURAS_FISICAS(id_museo, id_estructura_fis);


                                                        --8--                                
------------------------------------------------| HISTORICOS_CIERRES |-------------------------------------------------------------
CREATE TABLE HISTORICOS_CIERRES (
    id_museo INTEGER NOT NULL,
    id_estructura_fis INTEGER NOT NULL,
    id_sala INTEGER NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE  
);

ALTER TABLE HISTORICOS_CIERRES
ADD CONSTRAINT pk_historicos_cierres PRIMARY KEY (id_museo, id_estructura_fis, id_sala, fecha_inicio),
ADD CONSTRAINT fk_cierres_sala FOREIGN KEY (id_museo, id_estructura_fis, id_sala) REFERENCES SALAS_EXP (id_museo, id_estructura_fis, id_sala),
ADD CONSTRAINT check_fechas_cierre CHECK (fecha_fin >= fecha_inicio);


                                                        --9--                                
------------------------------------------------| EMPLEADOS_MANT_VIG |-------------------------------------------------------------
CREATE SEQUENCE seq_id_mant_vig START 1;
CREATE TABLE EMPLEADOS_MANT_VIG(
    id_mant_vig INTEGER DEFAULT NEXTVAL('seq_id_mant_vig') NOT NULL, 
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    doc_identidad VARCHAR(20) UNIQUE NOT NULL,
    tipo CHAR(1) NOT NULL    
);

ALTER TABLE EMPLEADOS_MANT_VIG
ADD CONSTRAINT pk_empleados_mant_vig PRIMARY KEY (id_mant_vig),
ADD CONSTRAINT check_tipo_empleado CHECK (tipo IN ('M', 'V')); -- 'M'=Mantenimiento, 'V'=Vigilante


                                                        --10--                                
------------------------------------------| MESES_ASIGNACIONES_EMPLEADOS |-----------------------------------------------------------
CREATE TABLE MESES_ASIGNACIONES_EMPLEADOS(
    id_museo INTEGER NOT NULL,
    id_estructura_fis INTEGER NOT NULL,
    id_mant_vig INTEGER NOT NULL,
    id_mes_anio DATE NOT NULL,
    turno CHAR(1) NOT NULL    
);

ALTER TABLE MESES_ASIGNACIONES_EMPLEADOS
ADD CONSTRAINT pk_asig_mensual_empleado PRIMARY KEY (id_museo, id_estructura_fis, id_mant_vig, id_mes_anio),
ADD CONSTRAINT check_turno_valido CHECK (turno IN ('M', 'V', 'N')), -- 'M'=Mañana, 'v'=vespertino, 'N'=Noche
ADD CONSTRAINT fk_mes_asig_emp_estructura FOREIGN KEY (id_museo, id_estructura_fis) REFERENCES ESTRUCTURAS_FISICAS(id_museo, id_estructura_fis),
ADD CONSTRAINT fk_mes_asig_emp_mant_vig FOREIGN KEY (id_mant_vig) REFERENCES EMPLEADOS_MANT_VIG(id_mant_vig);


                                                        --11--                                
-----------------------------------------------------| EVENTOS |----------------------------------------------------------------------
CREATE SEQUENCE seq_id_evento START 1;
CREATE TABLE EVENTOS(
    id_museo INTEGER NOT NULL,
    id_evento INTEGER DEFAULT NEXTVAL('seq_id_evento') NOT NULL,
    titulo VARCHAR(100) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    precio_persona NUMERIC,
    institucion_educativa VARCHAR(100),
    cantidad_persona INTEGER,
    id_estructura_fis INTEGER,
    id_sala INTEGER 
);

ALTER TABLE EVENTOS
ADD CONSTRAINT pk_eventos PRIMARY KEY (id_museo, id_evento),
ADD CONSTRAINT fk_museo_evento FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT fk_evento_sala FOREIGN KEY (id_museo, id_estructura_fis, id_sala) REFERENCES SALAS_EXP(id_museo, id_estructura_fis, id_sala),
ADD CONSTRAINT check_eventos_fechas CHECK (fecha_fin >= fecha_inicio);


                                                        --12--                                
-----------------------------------------------| RESUMENES_HISTORICOS |---------------------------------------------------------------------- 
CREATE TABLE RESUMENES_HISTORICOS(
    id_museo INTEGER NOT NULL,
    anio INTEGER NOT NULL,
    hechos VARCHAR(200) NOT NULL   
);

ALTER TABLE RESUMENES_HISTORICOS
ADD CONSTRAINT pk_resumenes_hist PRIMARY KEY (id_museo, anio),
ADD CONSTRAINT fk_resumenes_museo FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT check_anio_valido CHECK (anio BETWEEN 1800 AND EXTRACT(YEAR FROM CURRENT_DATE)::INTEGER);





                                                        --13--                                
-------------------------------------------------------| OBRAS |-----------------------------------------------------------------------------
create SEQUENCE seq_id_obra START 1;
CREATE TABLE OBRAS(
    id_obra INTEGER DEFAULT NEXTVAL('seq_id_obra') CONSTRAINT pk_obras PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    dimension VARCHAR(200) NOT NULL,
    tipo CHAR(1) NOT NULL,
    estilos VARCHAR(200) NOT NULL,
    caract_mat_tec VARCHAR(300) NOT NULL,
    id_sala INTEGER NOT NULL,                       
    id_estructura_fis INTEGER NOT NULL,         
    id_museo INTEGER NOT NULL,              
    periodo DATE   
);

ALTER TABLE OBRAS
ADD CONSTRAINT check_tipo_obra CHECK (tipo IN ('E', 'P')),   -- 'E'=Escultura, 'P'=Pintura
ADD CONSTRAINT fk_obra_sala FOREIGN KEY (id_museo,id_estructura_fis,id_sala) REFERENCES SALAS_EXP(id_museo,id_estructura_fis,id_sala);


                                                        --14--                                
-----------------------------------------------------| ARTISTAS |-------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_artista START 1;
CREATE TABLE ARTISTAS(
    id_artista INTEGER DEFAULT NEXTVAL('seq_id_artista') CONSTRAINT pk_artistas PRIMARY KEY,
    caract_est_tec VARCHAR(300) NOT NULL,
    nombre VARCHAR(100),
    apellido VARCHAR(100),
    nombre_artistico VARCHAR(100),
    fecha_nac DATE,
    fecha_def DATE
);

ALTER TABLE ARTISTAS
ADD CONSTRAINT check_fecha_art CHECK (fecha_def IS NULL OR fecha_def >= fecha_nac);


                                                        --15--                                
--------------------------------------------------| OBRAS_ARTISTAS |-----------------------------------------------------------------------------
CREATE TABLE OBRAS_ARTISTAS(
    id_obra INTEGER NOT NULL,
    id_artista INTEGER NOT NULL   
);

ALTER TABLE OBRAS_ARTISTAS
ADD CONSTRAINT pk_obras_artistas PRIMARY KEY (id_obra, id_artista),
ADD CONSTRAINT fk_obra_art_artista FOREIGN KEY (id_artista) REFERENCES ARTISTAS(id_artista),
ADD CONSTRAINT fk_obra_art_obra FOREIGN KEY (id_obra) REFERENCES OBRAS(id_obra);


                                                        --16--                                
------------------------------------------| EMPLEADOS_PROFESIONALES |-------------------------------------------------------------------------------
CREATE SEQUENCE seq_num_expediente START 1;
CREATE TABLE EMPLEADOS_PROFESIONALES (
    num_expediente INTEGER DEFAULT NEXTVAL('seq_num_expediente') CONSTRAINT pk_empleados_profesionales PRIMARY KEY,
    doc_identidad VARCHAR(20) UNIQUE NOT NULL,
    primer_nombre VARCHAR(100) NOT NULL,
    segundo_nombre VARCHAR(100),
    primer_apellido VARCHAR(100) NOT NULL,
    segundo_apellido VARCHAR(100) NOT NULL,
    fecha_nac DATE NOT NULL
);
 

                                                        --17--                                
-----------------------------------------------------| IDIOMAS |---------------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_idioma START 1;
CREATE TABLE IDIOMAS(
    id_idioma INTEGER DEFAULT NEXTVAL('seq_id_idioma') CONSTRAINT pk_idioma PRIMARY KEY,
    lengua VARCHAR(100) UNIQUE NOT NULL
);


                                                        --18--                                
-------------------------------------------------| IDIOMAS_EMPLEADOS |----------------------------------------------------------------------------------
CREATE TABLE IDIOMAS_EMPLEADOS (
    num_expediente INTEGER NOT NULL,
    id_idioma INTEGER NOT NULL 
);

ALTER TABLE IDIOMAS_EMPLEADOS
ADD CONSTRAINT pk_idiomas_empleados PRIMARY KEY (num_expediente, id_idioma),
ADD CONSTRAINT fk_idioma_emp FOREIGN KEY (num_expediente) REFERENCES EMPLEADOS_PROFESIONALES(num_expediente),
ADD CONSTRAINT fk_idioma FOREIGN KEY (id_idioma) REFERENCES IDIOMAS(id_idioma);


                                                        --19--                                
---------------------------------------------| FORMACIONES_PROFESIONALES |----------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_form_prof START 1;
CREATE TABLE FORMACIONES_PROFESIONALES (
    num_expediente INTEGER NOT NULL,
    id_form_prof INTEGER DEFAULT NEXTVAL('seq_id_form_prof') NOT NULL,
    nombre_titulo VARCHAR(100) NOT NULL,
    anio INTEGER NOT NULL,
    descripcion_especialidad VARCHAR(300) NOT NULL
    
);

ALTER TABLE FORMACIONES_PROFESIONALES
ADD CONSTRAINT pk_formaciones_profesionales PRIMARY KEY (num_expediente, id_form_prof),
ADD CONSTRAINT fk_form_prof_emp FOREIGN KEY (num_expediente) REFERENCES EMPLEADOS_PROFESIONALES(num_expediente),
ADD CONSTRAINT check_anio_formacion CHECK (anio BETWEEN 1900 AND EXTRACT(YEAR FROM CURRENT_DATE)::INTEGER);


                                                        --20--                                
-------------------------------------------| ESTRUCTURAS_ORGANIZACIONALES |-------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_estructura_org START 1;
CREATE TABLE ESTRUCTURAS_ORGANIZACIONALES(
    id_museo INTEGER NOT NULL,
    id_estructura_org INTEGER DEFAULT NEXTVAL('seq_id_estructura_org') NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    tipo CHAR(1) NOT NULL,
    descripcion VARCHAR(300) NOT NULL,
    nivel INTEGER NOT NULL CHECK (nivel >= 1),
    id_museo_padre INTEGER,
    id_estructura_org_padre INTEGER    
);

ALTER TABLE ESTRUCTURAS_ORGANIZACIONALES
ADD CONSTRAINT pk_estructuras_org PRIMARY KEY (id_museo, id_estructura_org),
ADD CONSTRAINT fk_estructura_org_museo FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT fk_estructura_org_padre FOREIGN KEY (id_museo_padre, id_estructura_org_padre) REFERENCES ESTRUCTURAS_ORGANIZACIONALES(id_museo, id_estructura_org),
ADD CONSTRAINT check_tipo_estructura_org CHECK (tipo IN ('D', 'P', 'S', 'B', 'C')); -- Dirección, Departamento, Sección, Subdepartamento, Subsección


                                                        --21--                                
-----------------------------------------------| HISTORICOS_EMPLEADOS |----------------------------------------------------------------------------------
CREATE TABLE HISTORICOS_EMPLEADOS(
    id_museo INTEGER NOT NULL,
    id_estructura_org INTEGER NOT NULL,
    num_expediente INTEGER NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE,
    cargo char(1) NOT NULL
);

ALTER TABLE HISTORICOS_EMPLEADOS
ADD CONSTRAINT pk_historico_empleados PRIMARY KEY (id_museo, id_estructura_org, num_expediente, fecha_inicio),
ADD CONSTRAINT fk_historico_emp_estruct_org FOREIGN KEY (id_museo, id_estructura_org) REFERENCES ESTRUCTURAS_ORGANIZACIONALES(id_museo, id_estructura_org),
ADD CONSTRAINT fk_historico_emp_emp_profesional FOREIGN KEY (num_expediente) REFERENCES EMPLEADOS_PROFESIONALES(num_expediente),
ADD CONSTRAINT check_cargo_valido CHECK (cargo IN ('D','R','C','A')), -- D: Director, R: Restaurador, C: Curador, A: Administrativo
ADD CONSTRAINT check_fechas_hist CHECK (fecha_fin IS NULL OR fecha_fin >= fecha_inicio);


                                                        --22--                                
----------------------------------------------------| COLECCIONES |------------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_coleccion START 1;
CREATE TABLE COLECCIONES(
    id_museo INTEGER NOT NULL,
    id_estructura_org INTEGER NOT NULL,
    id_coleccion INTEGER DEFAULT NEXTVAL('seq_id_coleccion') NOT NULL,
    nombre_coleccion VARCHAR(400) NOT NULL,
    descripcion_caracteristicas VARCHAR(400) NOT NULL,
    palabra_clave VARCHAR(100) NOT NULL,
    orden_recorrido INTEGER NOT NULL
);

ALTER TABLE COLECCIONES
ADD CONSTRAINT pk_colecciones PRIMARY KEY(id_museo,id_estructura_org,id_coleccion),
ADD CONSTRAINT fk_coleccion_estruct_org FOREIGN KEY (id_museo,id_estructura_org) REFERENCES ESTRUCTURAS_ORGANIZACIONALES(id_museo,id_estructura_org);


                                                        --23--                                
------------------------------------------------| COLECCIONES_SALAS |------------------------------------------------------------------------------------
CREATE TABLE COLECCIONES_SALAS(
    id_museo INTEGER NOT NULL,
    id_estructura_org INTEGER NOT NULL,
    id_coleccion INTEGER NOT NULL,
    id_estructura_fis INTEGER NOT NULL,
    id_sala INTEGER NOT NULL,
    orden_recorrido INTEGER NOT NULL
);

ALTER TABLE COLECCIONES_SALAS
ADD CONSTRAINT pk_colecciones_salas PRIMARY KEY (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala),
ADD CONSTRAINT fk_coleccion_sala_sala_exp FOREIGN KEY (id_museo,id_estructura_fis,id_sala) REFERENCES SALAS_EXP(id_museo,id_estructura_fis,id_sala),
ADD CONSTRAINT fk_coleccion_sala_coleccion FOREIGN KEY (id_museo,id_estructura_org,id_coleccion) REFERENCES COLECCIONES(id_museo,id_estructura_org,id_coleccion);


                                                        --24--                                
----------------------------------------------| HISTORICOS_MOVIMIENTOS |--------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_cat_museo START 1;
CREATE TABLE HISTORICOS_MOVIMIENTOS (
    id_museo INTEGER NOT NULL,
    id_obra INTEGER NOT NULL,
    id_cat_museo INTEGER DEFAULT NEXTVAL('seq_id_cat_museo') NOT NULL,
    fecha_inicio DATE NOT NULL,
    tipo_llegada CHAR(1) NOT NULL,
    destacada BOOLEAN NOT NULL DEFAULT FALSE,
    orden_recomendado INTEGER,
    valor_monetario NUMERIC,
    id_estructura_fis INTEGER NOT NULL,
    id_sala INTEGER NOT NULL,
    id_estructura_org INTEGER NOT NULL,
    id_coleccion INTEGER NOT NULL,
    num_expediente INTEGER NOT NULL,
    id_museo_origen INTEGER,
    fecha_fin DATE
);

ALTER TABLE HISTORICOS_MOVIMIENTOS
ADD CONSTRAINT pk_historicos_movimientos PRIMARY KEY (id_museo, id_obra, id_cat_museo),
ADD CONSTRAINT check_tipo_llegada CHECK (tipo_llegada IN ('C','D','A')), -- 'C'=Compra, 'D'=Donación
ADD CONSTRAINT fk_historico_mov_obra FOREIGN KEY (id_obra) REFERENCES OBRAS(id_obra),
ADD CONSTRAINT fk_historico_mov_museo_actual FOREIGN KEY (id_museo) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT fk_historico_mov_museo_origen FOREIGN KEY (id_museo_origen) REFERENCES MUSEOS(id_museo),
ADD CONSTRAINT fk_historico_mov_sala_exp FOREIGN KEY (id_museo,id_estructura_fis,id_sala) REFERENCES SALAS_EXP(id_museo,id_estructura_fis,id_sala),
ADD CONSTRAINT fk_historico_mov_emp_prof FOREIGN KEY (num_expediente) REFERENCES EMPLEADOS_PROFESIONALES(num_expediente),
ADD CONSTRAINT fk_historico_mov_coleccion FOREIGN KEY (id_museo,id_estructura_org,id_coleccion) REFERENCES COLECCIONES(id_museo,id_estructura_org,id_coleccion);


                                                        --25--                                
---------------------------------------------| MANTENIMIENTOS_ASIGNADOS |------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_mantenimiento_asig START 1;
CREATE TABLE MANTENIMIENTOS_ASIGNADOS(
    id_museo INTEGER NOT NULL,
    id_obra INTEGER NOT NULL,
    id_cat_museo INTEGER NOT NULL,
    id_mant_asig INTEGER DEFAULT NEXTVAL('seq_id_mantenimiento_asig') NOT NULL, 
    actividad VARCHAR(300) NOT NULL,
    frecuencia CHAR(1) NOT NULL,
    tipo_responsable CHAR(1) NOT NULL
);

ALTER TABLE MANTENIMIENTOS_ASIGNADOS
ADD CONSTRAINT pk_mantenimientos_asignados PRIMARY KEY (id_museo, id_obra, id_cat_museo, id_mant_asig), 
ADD CONSTRAINT fk_mant_asig_historico_mov FOREIGN KEY (id_museo,id_obra,id_cat_museo) REFERENCES HISTORICOS_MOVIMIENTOS(id_museo,id_obra,id_cat_museo),
ADD CONSTRAINT check_frecuencia CHECK (frecuencia IN ('D','S','M','A')), -- Diario, Semanal, Mensual, Anual
ADD CONSTRAINT check_tipo_responsable CHECK (tipo_responsable IN ('C','R','O')); -- Curador, Restaurador, Otro


                                                        --26--                                
---------------------------------------------| REGISTROS_ACT_REALIZADAS |-------------------------------------------------------------------------------
CREATE SEQUENCE seq_id_registro_act START 1;
CREATE TABLE REGISTROS_ACT_REALIZADAS (
    id_museo INTEGER NOT NULL,
    id_obra INTEGER NOT NULL,
    id_cat_museo INTEGER NOT NULL,
    id_mant_asig INTEGER NOT NULL,
    num_expediente INTEGER NOT NULL, 
    id_registro_act INTEGER DEFAULT NEXTVAL('seq_id_registro_act') NOT NULL, 
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE,
    observaciones VARCHAR(300) NOT NULL    
);

ALTER TABLE REGISTROS_ACT_REALIZADAS
ADD CONSTRAINT pk_regis_act_realizadas PRIMARY KEY (id_museo, id_obra, id_cat_museo, id_mant_asig, id_registro_act),
ADD CONSTRAINT fk_regis_act_mant_asig FOREIGN KEY (id_museo, id_obra, id_cat_museo, id_mant_asig) REFERENCES MANTENIMIENTOS_ASIGNADOS(id_museo, id_obra, id_cat_museo, id_mant_asig),
ADD CONSTRAINT fk_regis_act_emp_prof FOREIGN KEY (num_expediente) REFERENCES EMPLEADOS_PROFESIONALES(num_expediente),
ADD CONSTRAINT check_fechas_regis CHECK (fecha_fin IS NULL OR fecha_fin >= fecha_inicio);




-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ==================================== Procedimientos y Funciones de Uso Global  =========================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------

-- Obtener museos
CREATE OR REPLACE FUNCTION obtener_museos()
RETURNS TABLE(id_museo INTEGER, nombre VARCHAR, fecha_fundacion DATE) AS $$
BEGIN
  RETURN QUERY SELECT museos.id_museo, museos.nombre , museos.fecha_fundacion FROM museos ORDER BY museos.nombre;
END;
$$ LANGUAGE plpgsql;

-- Obtener estructuras organizacionales por museo
CREATE OR REPLACE FUNCTION obtener_estructuras_org_por_museo(id_museo_param INTEGER)
RETURNS TABLE(id_estructura_org INTEGER, nombre VARCHAR) AS $$
BEGIN
  RETURN QUERY
    SELECT estructuras_organizacionales.id_estructura_org, estructuras_organizacionales.nombre
    FROM estructuras_organizacionales
    WHERE estructuras_organizacionales.id_museo = id_museo_param
    ORDER BY estructuras_organizacionales.nombre;
END;
$$ LANGUAGE plpgsql;

-- Obtener idiomas
CREATE OR REPLACE FUNCTION obtener_idiomas()
RETURNS TABLE(id_idioma INTEGER, lengua VARCHAR) AS $$
BEGIN
  RETURN QUERY
    SELECT idiomas.id_idioma, idiomas.lengua
    FROM idiomas
    ORDER BY idiomas.lengua;
END;
$$ LANGUAGE plpgsql;

-- Obtener estructuras físicas por museo
CREATE OR REPLACE FUNCTION obtener_estructuras_fisicas_por_museo(id_museo_param INTEGER)
RETURNS TABLE(id_estructura_fis INTEGER, nombre VARCHAR) AS $$
BEGIN
  RETURN QUERY
    SELECT estructuras_fisicas.id_estructura_fis, estructuras_fisicas.nombre
    FROM estructuras_fisicas
    WHERE estructuras_fisicas.id_museo = id_museo_param
    ORDER BY estructuras_fisicas.nombre;
END;
$$ LANGUAGE plpgsql;

-- Obtener artistas
CREATE OR REPLACE FUNCTION obtener_artistas()
RETURNS TABLE(
  id_artista       INTEGER,
  nombre_artistico VARCHAR
) AS $$
BEGIN
  RETURN QUERY
    SELECT a.id_artista,
           a.nombre_artistico
      FROM artistas a
     WHERE a.nombre_artistico IS NOT NULL;
END;
$$ LANGUAGE plpgsql;


-- Obtener empleados profesionales
CREATE OR REPLACE FUNCTION obtener_empleados_profesionales()
RETURNS TABLE(
  num_expediente    INTEGER,
  nombre_completo   TEXT
)
LANGUAGE sql
AS $$
  SELECT
    e.num_expediente,
    e.primer_nombre || ' ' || e.primer_apellido AS nombre_completo
  FROM empleados_profesionales e
$$;


-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ==================================== Requerimientos individuales  =========================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------

                    
----------------------------------------------- RECURSOS HUMANOS ---------------------------------------------------

-----------------------------------------------------------------------
-- REQUERIMIENTO 1 - REGISTRO DE EMPLEADOS --
-----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION validar_formato_doc_identidad(p_doc VARCHAR)
RETURNS VOID AS $$
DECLARE
  letras_validas TEXT;
  resto TEXT;
  i INTEGER;
  encontrado_digito BOOLEAN := FALSE;
  c CHAR;
BEGIN
  -- Validar longitud
  IF LENGTH(p_doc) NOT IN (8, 9) THEN
    RAISE EXCEPTION 'formato de pasaporte no valido';
  END IF;

  -- Validar que el primer carácter sea letra
  IF SUBSTRING(p_doc FROM 1 FOR 1) !~ '^[A-Z]$' THEN
    RAISE EXCEPTION 'formato de pasaporte no valido';
  END IF;

  -- Validar los primeros 3 caracteres
  letras_validas := SUBSTRING(p_doc FROM 1 FOR 3);
  FOR i IN 1..LENGTH(letras_validas) LOOP
    c := SUBSTRING(letras_validas FROM i FOR 1);
    IF c ~ '[0-9]' THEN
      encontrado_digito := TRUE;
    ELSIF encontrado_digito THEN
      -- Si ya se encontró un número y ahora aparece una letra => error
      RAISE EXCEPTION 'formato de pasaporte no valido';
    END IF;
  END LOOP;

  -- Validar que los caracteres a partir del cuarto sean todos números
  resto := SUBSTRING(p_doc FROM 4);
  IF resto ~ '[^0-9]' THEN
    RAISE EXCEPTION 'formato de pasaporte no valido';
  END IF;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION validar_fecha_nacimiento(p_fecha DATE)
RETURNS VOID AS $$
DECLARE
  edad_actual INTEGER;
BEGIN
  IF p_fecha > CURRENT_DATE THEN
    RAISE EXCEPTION 'fecha de nacimiento no valida';
  END IF;

  edad_actual := DATE_PART('year', AGE(CURRENT_DATE, p_fecha));

  IF edad_actual < 18 OR edad_actual > 100 THEN
    RAISE EXCEPTION 'fecha de nacimiento no valida';
  END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION validar_anio_formacion(p_anio INTEGER)
RETURNS VOID AS $$
DECLARE
  anio_actual INTEGER := EXTRACT(YEAR FROM CURRENT_DATE)::INTEGER;
BEGIN
  IF p_anio < 1900 OR p_anio >= anio_actual THEN
    RAISE EXCEPTION 'año de formacion no valido';
  END IF;

  IF LENGTH(p_anio::TEXT) != 4 THEN
    RAISE EXCEPTION 'año de formacion no valido';
  END IF;
END;
$$ LANGUAGE plpgsql;


-- PROCEDURE PARA REGISTRAR EMPLEADOS
CREATE OR REPLACE FUNCTION insertar_empleado(
    p_doc_identidad VARCHAR,
    p_primer_nombre VARCHAR,
    p_segundo_nombre VARCHAR,
    p_primer_apellido VARCHAR,
    p_segundo_apellido VARCHAR,
    p_fecha_nac DATE
) RETURNS INTEGER AS $$
DECLARE
    v_num_expediente INTEGER;
BEGIN
    PERFORM validar_formato_doc_identidad(UPPER(p_doc_identidad));
    PERFORM validar_fecha_nacimiento(p_fecha_nac);

    INSERT INTO EMPLEADOS_PROFESIONALES (
        doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac
    ) VALUES (
        UPPER(p_doc_identidad), UPPER(p_primer_nombre), UPPER(p_segundo_nombre),
        UPPER(p_primer_apellido), UPPER(p_segundo_apellido), p_fecha_nac
    )
    RETURNING num_expediente INTO v_num_expediente;

    RETURN v_num_expediente;
END;
$$ LANGUAGE plpgsql;


-- PROCEDURE PARA REGISTRAR FORMACIONES PROFESIONALES
CREATE OR REPLACE PROCEDURE insertar_formacion(
    p_num_expediente INTEGER,
    p_nombre_titulo VARCHAR,
    p_anio INTEGER,
    p_descripcion_especialidad VARCHAR
)
AS $$
BEGIN
    PERFORM validar_anio_formacion(p_anio);

    INSERT INTO FORMACIONES_PROFESIONALES (
        num_expediente, nombre_titulo, anio, descripcion_especialidad
    ) VALUES (
        p_num_expediente, UPPER(p_nombre_titulo), p_anio, UPPER(p_descripcion_especialidad)
    );
END;
$$ LANGUAGE plpgsql;


-- PROCEDURE PARA REGISTRAR HISTÓRICO DE EMPLEADOS
CREATE OR REPLACE PROCEDURE insertar_historico(
    p_num_expediente INTEGER,
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_fecha_inicio DATE,
    p_cargo CHAR(1)
)
AS $$
BEGIN
    INSERT INTO HISTORICOS_EMPLEADOS (
        id_museo, id_estructura_org, num_expediente, fecha_inicio, cargo
    ) VALUES (
        p_id_museo, p_id_estructura_org, p_num_expediente, p_fecha_inicio, p_cargo
    );
END;
$$ LANGUAGE plpgsql;


-- PROCEDURE PARA REGISTRAR HISTÓRICO DE EMPLEADOS
CREATE OR REPLACE PROCEDURE insertar_idiomas_empleado(
    p_num_expediente INTEGER,
    p_idiomas INTEGER[]
)
AS $$
BEGIN
    IF p_idiomas IS NULL OR array_length(p_idiomas, 1) = 0 THEN
        RAISE EXCEPTION 'Todo empleado debe hablar al menos un idioma';
    END IF;

    INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma)
    SELECT p_num_expediente, unnest(p_idiomas);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION insertar_nuevos_idiomas(p_lenguas VARCHAR[])
RETURNS INTEGER[] AS $$
DECLARE
  nueva_lengua VARCHAR;
  v_id INTEGER;
  v_ids INTEGER[] := '{}';
BEGIN
  FOREACH nueva_lengua IN ARRAY p_lenguas
  LOOP
    -- Insertar solo si no existe
    INSERT INTO IDIOMAS (lengua)
    VALUES (UPPER(nueva_lengua))
    ON CONFLICT (lengua) DO NOTHING;

    -- Obtener su ID (ya sea nuevo o existente)
    SELECT i.id_idioma INTO v_id
    FROM IDIOMAS i
    WHERE i.lengua = UPPER(nueva_lengua);

    v_ids := array_append(v_ids, v_id);
  END LOOP;

  RETURN v_ids;
END;
$$ LANGUAGE plpgsql;

-- PROCEDURE PRINCIPAL PARA REGISTRAR EMPLEADO COMPLETO
CREATE OR REPLACE PROCEDURE registrar_empleado_profesional(
    p_doc_identidad VARCHAR,
    p_primer_nombre VARCHAR,
    p_segundo_nombre VARCHAR,
    p_primer_apellido VARCHAR,
    p_segundo_apellido VARCHAR,
    p_fecha_nac DATE,
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_fecha_inicio DATE,
    p_cargo CHAR(1),
    p_nombre_titulo VARCHAR,
    p_anio INTEGER,
    p_descripcion_especialidad VARCHAR,
    p_idiomas INTEGER[]
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_num_expediente INTEGER;
BEGIN
    v_num_expediente := insertar_empleado(
        p_doc_identidad,
        p_primer_nombre,
        p_segundo_nombre,
        p_primer_apellido,
        p_segundo_apellido,
        p_fecha_nac
    );

    CALL insertar_historico(
        v_num_expediente,
        p_id_museo,
        p_id_estructura_org,
        p_fecha_inicio,
        p_cargo
    );

    CALL insertar_formacion(
        v_num_expediente,
        p_nombre_titulo,
        p_anio,
        p_descripcion_especialidad
    );

    CALL insertar_idiomas_empleado(
        v_num_expediente,
        p_idiomas
    );
END;
$$;


-- REGISTRO DE EMPLEADOS DE MANTENIMIENTO Y VIGILANCIA
CREATE OR REPLACE PROCEDURE registrar_empleado_mantenimiento_vigilancia(
    p_nombre VARCHAR,
    p_apellido VARCHAR,
    p_doc_identidad VARCHAR,
    p_tipo CHAR
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_existente INTEGER;
BEGIN
    -- Validar formato del documento
    PERFORM validar_formato_doc_identidad(UPPER(p_doc_identidad));

    -- Validar tipo permitido
    IF p_tipo NOT IN ('M', 'V') THEN
        RAISE EXCEPTION 'tipo de empleado no valido';
    END IF;

    -- Verificar si ya existe ese documento de identidad
    SELECT COUNT(*) INTO v_existente
    FROM EMPLEADOS_MANT_VIG
    WHERE doc_identidad = UPPER(p_doc_identidad);

    IF v_existente > 0 THEN
        RAISE EXCEPTION 'el documento de identidad ya está registrado';
    END IF;

    -- Insertar en mayúsculas
    INSERT INTO EMPLEADOS_MANT_VIG(nombre, apellido, doc_identidad, tipo)
    VALUES (
        UPPER(p_nombre),
        UPPER(p_apellido),
        UPPER(p_doc_identidad),
        p_tipo
    );
END;
$$;





-----------------------------------------------------------------------
-- REQUERIMIENTO 2 - MANTENIMIENTO DE HISTORIAS DE TRABAJO --
-----------------------------------------------------------------------

--Abrir historico de empleado
CREATE OR REPLACE PROCEDURE registrar_historico_empleado(
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_num_expediente INTEGER,
    p_fecha_inicio DATE,
    p_fecha_fin DATE,
    p_cargo CHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- 1. Validar que exista el museo y la estructura organizacional
    IF NOT EXISTS (
        SELECT 1 FROM ESTRUCTURAS_ORGANIZACIONALES
        WHERE id_museo = p_id_museo AND id_estructura_org = p_id_estructura_org
    ) THEN
        RAISE EXCEPTION 'La estructura organizacional no existe para el museo indicado.';
    END IF;

    -- 2. Validar que el empleado profesional exista
    IF NOT EXISTS (
        SELECT 1 FROM EMPLEADOS_PROFESIONALES
        WHERE num_expediente = p_num_expediente
    ) THEN
        RAISE EXCEPTION 'El número de expediente no existe.';
    END IF;

    -- 3. Validar que no haya ya un historico abierto para ese empleado
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_EMPLEADOS
        WHERE num_expediente = p_num_expediente AND fecha_fin IS NULL
    ) THEN
        RAISE EXCEPTION 'El empleado ya tiene un historico de cargo activo. Debe cerrarse antes de asignar uno nuevo.';
    END IF;

    -- 5. Insertar el nuevo historico
    INSERT INTO HISTORICOS_EMPLEADOS (
        id_museo,
        id_estructura_org,
        num_expediente,
        fecha_inicio,
        fecha_fin,
        cargo
    ) VALUES (
        p_id_museo,
        p_id_estructura_org,
        p_num_expediente,
        p_fecha_inicio,
        p_fecha_fin,
        UPPER(p_cargo)
    );
    RAISE NOTICE 'historico registrado correctamente.';
END;
$$;


-- Cierre de historico de empleado
CREATE OR REPLACE PROCEDURE cerrar_historico_empleado(
    p_num_expediente INTEGER,
    p_fecha_fin DATE
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_fecha_inicio_actual DATE;
BEGIN
    -- 1. Verificar que existe el historico activo exacto
    SELECT fecha_inicio INTO v_fecha_inicio_actual
    FROM HISTORICOS_EMPLEADOS
    WHERE num_expediente = p_num_expediente AND fecha_fin IS NULL;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'No se encontró un historico activo con los datos especificados.';
    END IF;

    -- 2. Validar que la fecha de cierre sea posterior o igual al inicio
    IF p_fecha_fin < v_fecha_inicio_actual THEN
        RAISE EXCEPTION 'La fecha de fin no puede ser menor que la fecha de inicio.';
    END IF;

    -- 3. Actualizar el historico
    UPDATE HISTORICOS_EMPLEADOS
    SET fecha_fin = p_fecha_fin
    WHERE num_expediente = p_num_expediente AND fecha_fin IS NULL;

    RAISE NOTICE 'historico cerrado correctamente.';
END;
$$;


---ver historico empleados
CREATE OR REPLACE FUNCTION ver_historico_empleado(p_num_expediente INTEGER)
RETURNS TABLE (
    empleado VARCHAR,
    museo VARCHAR,
    departamento VARCHAR,
    cargo CHAR,
    fecha_inicio DATE,
    fecha_fin DATE
)
LANGUAGE sql
AS $$
    SELECT 
        TRIM(
            ep.primer_nombre || ' ' ||
            COALESCE(ep.segundo_nombre || ' ', '') ||
            ep.primer_apellido || ' ' ||
            ep.segundo_apellido
        ) AS empleado,
        m.nombre AS museo,
        eo.nombre AS departamento,
        h.cargo,
        h.fecha_inicio,
        h.fecha_fin
    FROM HISTORICOS_EMPLEADOS h
    JOIN EMPLEADOS_PROFESIONALES ep
        ON h.num_expediente = ep.num_expediente
    JOIN ESTRUCTURAS_ORGANIZACIONALES eo 
        ON h.id_museo = eo.id_museo AND h.id_estructura_org = eo.id_estructura_org
    JOIN MUSEOS m 
        ON h.id_museo = m.id_museo
    WHERE h.num_expediente = p_num_expediente
    ORDER BY h.fecha_inicio;
$$;


-----------------------------------------------------------------------
-- REQUERIMIENTO 3 - ASIGNACIONES DE MANTENIMIENTOS DE OBRAS --
-----------------------------------------------------------------------

--Asignar un mantenimiento a una obra
CREATE OR REPLACE FUNCTION asignar_mantenimiento_obra(
    p_id_museo INT,
    p_id_obra INT,
    p_id_cat_museo INT,
    p_actividad VARCHAR,
    p_frecuencia CHAR,
    p_tipo_responsable CHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO MANTENIMIENTOS_ASIGNADOS (
        id_museo, id_obra, id_cat_museo, actividad,
        frecuencia, tipo_responsable
    )
    VALUES (
        p_id_museo, p_id_obra, p_id_cat_museo, p_actividad,
        p_frecuencia, p_tipo_responsable
    );
END;
$$ LANGUAGE plpgsql;


--Registrar actividad de mantenimiento realizada
CREATE OR REPLACE FUNCTION registrar_mantenimiento_realizado(
    p_id_museo INT,
    p_id_obra INT,
    p_id_cat_museo INT,
    p_id_mant_asig INT,
    p_num_expediente INT,
    p_fecha_inicio DATE,
    p_fecha_fin DATE,
    p_observaciones VARCHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO REGISTROS_ACT_REALIZADAS (
        id_museo, id_obra, id_cat_museo, id_mant_asig,
        num_expediente, fecha_inicio, fecha_fin, observaciones
    )
    VALUES (
        p_id_museo, p_id_obra, p_id_cat_museo, p_id_mant_asig,
        p_num_expediente, p_fecha_inicio, p_fecha_fin, p_observaciones
    );
END;
$$ LANGUAGE plpgsql;

-- Registrar fin de actividad de mantenimiento
CREATE OR REPLACE PROCEDURE finalizar_act_mantenimiento(
    p_id_museo INT,
    p_id_obra INT,
    p_id_cat_museo INT,
    p_id_mant_asig INT,
    p_num_expediente INT,
    p_fecha_inicio DATE,
    p_fecha_fin DATE
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE REGISTROS_ACT_REALIZADAS
    SET fecha_fin = p_fecha_fin
    WHERE id_museo = p_id_museo
      AND id_obra = p_id_obra
      AND id_cat_museo = p_id_cat_museo
      AND id_mant_asig = p_id_mant_asig
      AND num_expediente = p_num_expediente
      AND fecha_inicio = p_fecha_inicio;
END;
$$;




-----------------------------------------------------------------------
-- REQUERIMIENTO 4 - ASIGNACIONES DE MANTENIMIENTO Y VIGILANCIA --
-----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION truncar_a_mes(p_fecha DATE)
RETURNS DATE AS $$
BEGIN
    RETURN date_trunc('month', p_fecha)::DATE;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION validar_turno_asignacion(p_turno CHAR)
RETURNS VOID AS $$
BEGIN
    IF p_turno NOT IN ('M', 'V', 'N') THEN
        RAISE EXCEPTION 'Turno inválido. Solo se permiten M (mañana), v (vespertino) o N (noche).';
    END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION verificar_existencia_empleado(p_id_mant_vig INTEGER)
RETURNS VOID AS $$
DECLARE
    v_existe INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_existe
    FROM EMPLEADOS_MANT_VIG
    WHERE id_mant_vig = p_id_mant_vig;

    IF v_existe = 0 THEN
        RAISE EXCEPTION 'El empleado con ID % no existe', p_id_mant_vig;
    END IF;
END;
$$ LANGUAGE plpgsql;
 

CREATE OR REPLACE FUNCTION verificar_existencia_estructura(
    p_id_museo INTEGER,
    p_id_estructura_fis INTEGER
)
RETURNS VOID AS $$
DECLARE
    v_existe INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_existe
    FROM ESTRUCTURAS_FISICAS
    WHERE id_museo = p_id_museo
      AND id_estructura_fis = p_id_estructura_fis;

    IF v_existe = 0 THEN
        RAISE EXCEPTION 'No existe la estructura física con ID % para el museo %',
                        p_id_estructura_fis, p_id_museo;
    END IF;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION verificar_asignacion_preexistente(
    p_id_mant_vig INTEGER,
    p_id_museo INTEGER,
    p_id_estructura_fis INTEGER,
    p_id_mes_anio DATE,
    p_turno CHAR
)
RETURNS VOID AS $$
DECLARE
    v_existente INTEGER;
BEGIN
    -- 1. Validar duplicado exacto
    SELECT COUNT(*) INTO v_existente
    FROM MESES_ASIGNACIONES_EMPLEADOS
    WHERE id_mant_vig = p_id_mant_vig
      AND id_museo = p_id_museo
      AND id_estructura_fis = p_id_estructura_fis
      AND id_mes_anio = p_id_mes_anio
      AND turno = p_turno;

    IF v_existente > 0 THEN
        RAISE EXCEPTION 'El empleado ya tiene esa asignación registrada exactamente igual.';
    END IF;

    -- 2. Validar asignación solapada en otra estructura con mismo mes y turno
    SELECT COUNT(*) INTO v_existente
    FROM MESES_ASIGNACIONES_EMPLEADOS
    WHERE id_mant_vig = p_id_mant_vig
      AND id_mes_anio = p_id_mes_anio
      AND turno = p_turno
      AND (id_museo != p_id_museo OR id_estructura_fis != p_id_estructura_fis);

    IF v_existente > 0 THEN
        RAISE EXCEPTION 'El empleado ya tiene asignado ese turno en otra estructura en el mismo mes.';
    END IF;
END;
$$ LANGUAGE plpgsql;


-- PROCEDURE PRINCIPAL PARA ASIGNAR A EMPLEADO
CREATE OR REPLACE PROCEDURE asignar_empleado(
    p_id_mant_vig INTEGER,
    p_id_museo INTEGER,
    p_id_estructura_fis INTEGER,
    p_fecha DATE,
    p_turno CHAR
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_fecha_mes DATE;
BEGIN
    -- 1. Validar existencia del empleado
    PERFORM verificar_existencia_empleado(p_id_mant_vig);

    -- 2. Validar existencia de la estructura física asociada al museo
    PERFORM verificar_existencia_estructura(p_id_museo, p_id_estructura_fis);

    -- 3. Validar turno
    PERFORM validar_turno_asignacion(UPPER(p_turno));

    -- 4. Truncar la fecha a mes
    v_fecha_mes := truncar_a_mes(p_fecha);

    -- 5. Validar que no haya conflicto o duplicado
    PERFORM verificar_asignacion_preexistente(
        p_id_mant_vig,
        p_id_museo,
        p_id_estructura_fis,
        v_fecha_mes,
        UPPER(p_turno) 
    );
    

    -- 6. Insertar en mayúsculas (aunque solo aplica al turno, ya que los IDs son enteros)
    INSERT INTO MESES_ASIGNACIONES_EMPLEADOS (
        id_museo,
        id_estructura_fis,
        id_mant_vig,
        id_mes_anio,
        turno
    ) VALUES (
        p_id_museo,
        p_id_estructura_fis,
        p_id_mant_vig,
        v_fecha_mes,
        UPPER(p_turno)
    );
END;
$$;


-- PROCEDURE PARA OBTENER TODAS LAS ASIGNACIONES DEL EMPLEADO
CREATE OR REPLACE FUNCTION obtener_asignaciones_empleado(p_id_mant_vig INTEGER)
RETURNS TABLE (
  id_museo INTEGER,
  nombre_museo VARCHAR,
  id_estructura_fis INTEGER,
  nombre_estructura VARCHAR,
  fecha DATE,
  turno CHAR(1),
  tipo CHAR(1)
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    m.id_museo,
    mu.nombre AS nombre_museo,
    m.id_estructura_fis,
    ef.nombre AS nombre_estructura,
    m.id_mes_anio AS fecha,
    m.turno,
    emv.tipo
  FROM MESES_ASIGNACIONES_EMPLEADOS m
    JOIN MUSEOS mu ON mu.id_museo = m.id_museo
    JOIN ESTRUCTURAS_FISICAS ef ON ef.id_estructura_fis = m.id_estructura_fis
    JOIN EMPLEADOS_MANT_VIG emv ON emv.id_mant_vig = m.id_mant_vig
  WHERE m.id_mant_vig = p_id_mant_vig
  ORDER BY m.id_mes_anio DESC;
END;
$$ LANGUAGE plpgsql;

-- Obtener empleados de mantenimiento/vigilancia por tipo
CREATE OR REPLACE FUNCTION obtener_empleados_mant_vig_por_tipo(tipo_param CHAR)
RETURNS TABLE(id_mant_vig INTEGER, nombre VARCHAR, apellido VARCHAR) AS $$
BEGIN
  RETURN QUERY
    SELECT empleados_mant_vig.id_mant_vig, empleados_mant_vig.nombre, empleados_mant_vig.apellido
    FROM empleados_mant_vig
    WHERE empleados_mant_vig.tipo = tipo_param
    ORDER BY empleados_mant_vig.apellido, empleados_mant_vig.nombre;
END;
$$ LANGUAGE plpgsql;



------------------------------------- ADMINISTRACIÓN GENERAL DEL MUSEO ---------------------------------------------------

-----------------------------------------------------------------------
-- REQUERIMIENTO 1.1 - MANTENIMIENTO ESTRUCTURA FISICA --
-----------------------------------------------------------------------
--crear nueva estructura fisica
CREATE OR REPLACE PROCEDURE crear_estructura_fisica(
    p_id_museo INTEGER,
    p_nombre VARCHAR,
    p_tipo CHAR,
    p_descripcion VARCHAR,
    p_direccion VARCHAR,
    p_id_museo_padre INTEGER,
    p_id_padre INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO ESTRUCTURAS_FISICAS(
        id_museo, nombre, tipo, descripcion, direccion, id_museo_padre, id_padre
    ) VALUES (
        p_id_museo, p_nombre, p_tipo, p_descripcion, p_direccion, p_id_museo_padre, p_id_padre
    );
END;
$$;

--actualizar estructura fisica
CREATE OR REPLACE PROCEDURE actualizar_estructura_fisica(
    p_nombre VARCHAR,
    p_descripcion VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE ESTRUCTURAS_FISICAS
    SET nombre = p_nombre,
        descripcion = p_descripcion
    WHERE id_museo = p_id_museo AND id_estructura_fis = p_id_estructura_fis;
END;
$$;



-----------------------------------------------------------------------
-- REQUERIMIENTO 1.2 - MANTENIMIENTO ESTRUCTURA ORGANIZACIONAL --
-----------------------------------------------------------------------
-- Crear nueva estructura organizacional
CREATE OR REPLACE PROCEDURE crear_estructura_organizacional(
    p_id_museo INTEGER,
    p_nombre VARCHAR,
    p_tipo CHAR,
    p_descripcion VARCHAR,
    p_nivel INTEGER,
    p_id_museo_padre INTEGER,
    p_id_estructura_org_padre INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO ESTRUCTURAS_ORGANIZACIONALES(
        id_museo, nombre, tipo, descripcion, nivel, id_museo_padre, id_estructura_org_padre
    ) VALUES (
        p_id_museo, p_nombre, p_tipo, p_descripcion, p_nivel, p_id_museo_padre, p_id_estructura_org_padre
    );
END;
$$;

-- Actualizar estructura organizacional
CREATE OR REPLACE PROCEDURE actualizar_estructura_organizacional(
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_nombre VARCHAR,
    p_descripcion VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE ESTRUCTURAS_ORGANIZACIONALES
    SET nombre = p_nombre,
        descripcion = p_descripcion
    WHERE id_museo = p_id_museo AND id_estructura_org = p_id_estructura_org;
END;
$$;


-----------------------------------------------------------------------
-- REQUERIMIENTO 2 - CALCULO DE RANKING --
-----------------------------------------------------------------------

-- FUNCION AUXILIAR: VISITAS ANUALES POR MUSEO
CREATE OR REPLACE FUNCTION visitas_anuales_museo(p_id_museo INTEGER, p_anio INTEGER)
RETURNS INTEGER AS $$
DECLARE
    v_visitas INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_visitas
    FROM ENTRADAS
    WHERE id_museo = p_id_museo
      AND EXTRACT(YEAR FROM fecha_hora_emision) = p_anio;
    RETURN v_visitas;
END;
$$ LANGUAGE plpgsql;



-- FUNCION AUXILIAR: ROTACION ANUAL POR MUSEO 
CREATE OR REPLACE FUNCTION rotacion_anual_museo(p_id_museo INTEGER, p_anio INTEGER)
RETURNS NUMERIC AS $$
DECLARE
    v_salidas INTEGER;
    v_prom_activos NUMERIC;
BEGIN
    -- Salidas: empleados cuyo fecha_fin está en el año
    SELECT COUNT(*) INTO v_salidas
    FROM HISTORICOS_EMPLEADOS
    WHERE id_museo = p_id_museo
      AND fecha_fin IS NOT NULL
      AND EXTRACT(YEAR FROM fecha_fin) = p_anio;

    -- Promedio de empleados activos por mes en el año
    WITH meses AS (
        SELECT generate_series(1,12) AS mes
    ),
    activos_mes AS (
        SELECT
            m.mes,
            COUNT(DISTINCT h.num_expediente) AS cant
        FROM meses m
        LEFT JOIN HISTORICOS_EMPLEADOS h
            ON h.id_museo = p_id_museo
            AND h.fecha_inicio <= make_date(p_anio, m.mes, 1)
            AND (h.fecha_fin IS NULL OR h.fecha_fin >= make_date(p_anio, m.mes, 1))
        GROUP BY m.mes
    )
    SELECT AVG(cant)::NUMERIC INTO v_prom_activos FROM activos_mes;

    IF v_prom_activos IS NULL OR v_prom_activos = 0 THEN
        RETURN 0;
    END IF;

    RETURN v_salidas / v_prom_activos;
END;
$$ LANGUAGE plpgsql;


-- RANKING MUNDIAL DE MUSEOS EN TABLA
CREATE OR REPLACE FUNCTION ranking_mundial_museos(p_anio INTEGER)
RETURNS TABLE (
    nombre_museo VARCHAR,
    visitas INTEGER,
    rotacion NUMERIC,
    score NUMERIC
) AS $$
DECLARE
    v_max_visitas INTEGER;
    v_max_rotacion NUMERIC;
BEGIN
    SELECT MAX(visitas_anuales_museo(id_museo, p_anio)) INTO v_max_visitas FROM MUSEOS;
    SELECT MAX(rotacion_anual_museo(id_museo, p_anio)) INTO v_max_rotacion FROM MUSEOS;

    RETURN QUERY
    SELECT
        m.nombre,
        visitas_anuales_museo(m.id_museo, p_anio) AS visitas,
        rotacion_anual_museo(m.id_museo, p_anio) AS rotacion,
        CASE 
            WHEN v_max_visitas = 0 THEN 0
            ELSE (visitas_anuales_museo(m.id_museo, p_anio)::NUMERIC / v_max_visitas) / 
                 (1 + CASE WHEN v_max_rotacion > 0 THEN rotacion_anual_museo(m.id_museo, p_anio) / v_max_rotacion ELSE 0 END)
        END AS score
    FROM MUSEOS m
    ORDER BY score DESC, nombre;
END;
$$ LANGUAGE plpgsql;

-- RANKING POR PAÍS DE MUSEOS EN TABLA
CREATE OR REPLACE FUNCTION ranking_pais_museos(p_anio INTEGER, p_id_pais INTEGER)
RETURNS TABLE (
    nombre_museo VARCHAR,
    visitas INTEGER,
    rotacion NUMERIC,
    score NUMERIC
) AS $$
DECLARE
    v_max_visitas INTEGER;
    v_max_rotacion NUMERIC;
BEGIN
    SELECT MAX(visitas_anuales_museo(m.id_museo, p_anio))
      INTO v_max_visitas
      FROM MUSEOS m
      JOIN LUGARES_GEOGRAFICOS l ON m.id_lugar = l.id_lugar
      WHERE (l.tipo = 'C' AND l.id_lugar_padre = p_id_pais)
         OR (l.tipo = 'P' AND l.id_lugar = p_id_pais);

    SELECT MAX(rotacion_anual_museo(m.id_museo, p_anio))
      INTO v_max_rotacion
      FROM MUSEOS m
      JOIN LUGARES_GEOGRAFICOS l ON m.id_lugar = l.id_lugar
      WHERE (l.tipo = 'C' AND l.id_lugar_padre = p_id_pais)
         OR (l.tipo = 'P' AND l.id_lugar = p_id_pais);

    RETURN QUERY
    SELECT
        m.nombre,
        visitas_anuales_museo(m.id_museo, p_anio) AS visitas,
        rotacion_anual_museo(m.id_museo, p_anio) AS rotacion,
        CASE 
            WHEN v_max_visitas = 0 THEN 0
            ELSE (visitas_anuales_museo(m.id_museo, p_anio)::NUMERIC / v_max_visitas) / 
                 (1 + CASE WHEN v_max_rotacion > 0 THEN rotacion_anual_museo(m.id_museo, p_anio) / v_max_rotacion ELSE 0 END)
        END AS score
    FROM MUSEOS m
    JOIN LUGARES_GEOGRAFICOS l ON m.id_lugar = l.id_lugar
    WHERE (l.tipo = 'C' AND l.id_lugar_padre = p_id_pais)
       OR (l.tipo = 'P' AND l.id_lugar = p_id_pais)
    ORDER BY score DESC, nombre;
END;
$$ LANGUAGE plpgsql;

-----------------------------------------------------------------------
-- REQUERIMIENTO 3 - ADMINISTRACION DE OBRAS Y COLECCIONES --
-----------------------------------------------------------------------

--modificar atributos de colecciones
CREATE OR REPLACE PROCEDURE modificar_coleccion(
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_id_coleccion INTEGER,
    p_nombre_coleccion VARCHAR(400) DEFAULT NULL,
    p_descripcion_caracteristicas VARCHAR(400) DEFAULT NULL,
    p_palabra_clave VARCHAR(100) DEFAULT NULL,
    p_orden_recorrido INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE colecciones
    SET
        nombre_coleccion = COALESCE(p_nombre_coleccion, nombre_coleccion),
        descripcion_caracteristicas = COALESCE(p_descripcion_caracteristicas, descripcion_caracteristicas),
        palabra_clave = COALESCE(p_palabra_clave, palabra_clave),
        orden_recorrido = COALESCE(p_orden_recorrido, orden_recorrido)
    WHERE
        id_museo = p_id_museo
        AND id_estructura_org = p_id_estructura_org
        AND id_coleccion = p_id_coleccion;
END;
$$;


--Agregar coleccion 
CREATE OR REPLACE FUNCTION insertar_coleccion(
  p_id_museo                    INTEGER,
  p_id_estructura_org           INTEGER,
  p_nombre_coleccion            VARCHAR,
  p_descripcion_caracteristicas VARCHAR,
  p_palabra_clave               VARCHAR,
  p_orden_recorrido             INTEGER
)
RETURNS TABLE(
  id_museo                    INTEGER,
  id_estructura_org           INTEGER,
  id_coleccion                INTEGER,
  nombre_coleccion            VARCHAR,
  descripcion_caracteristicas VARCHAR,
  palabra_clave               VARCHAR,
  orden_recorrido             INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
    INSERT INTO colecciones AS c(
      id_museo,
      id_estructura_org,
      nombre_coleccion,
      descripcion_caracteristicas,
      palabra_clave,
      orden_recorrido
    ) VALUES (
      p_id_museo,
      p_id_estructura_org,
      p_nombre_coleccion,
      p_descripcion_caracteristicas,
      p_palabra_clave,
      p_orden_recorrido
    )
    RETURNING
      c.id_museo,
      c.id_estructura_org,
      c.id_coleccion,
      c.nombre_coleccion,
      c.descripcion_caracteristicas,
      c.palabra_clave,
      c.orden_recorrido;
END;
$$;


--Asignar salas a colecciones
CREATE OR REPLACE PROCEDURE asignar_sala_a_coleccion(
    p_id_museo INTEGER,
    p_id_estructura_org INTEGER,
    p_id_coleccion INTEGER,
    p_id_estructura_fis INTEGER,
    p_id_sala INTEGER,
    p_orden_recorrido INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_cantidad_salas INTEGER;
BEGIN
    -- Validar existencia de la colección
    IF NOT EXISTS (
        SELECT 1 FROM colecciones
        WHERE id_museo = p_id_museo
          AND id_estructura_org = p_id_estructura_org
          AND id_coleccion = p_id_coleccion
    ) THEN
        RAISE EXCEPTION 'La colección no existe.';
    END IF;

    -- Validar existencia de la sala
    IF NOT EXISTS (
        SELECT 1 FROM salas_exp
        WHERE id_museo = p_id_museo
          AND id_estructura_fis = p_id_estructura_fis
          AND id_sala = p_id_sala
    ) THEN
        RAISE EXCEPTION 'La sala no existe.';
    END IF;

    -- Contar cuántas salas tiene la colección actualmente
    SELECT COUNT(*) INTO v_cantidad_salas
    FROM colecciones_salas
    WHERE id_museo = p_id_museo
      AND id_estructura_org = p_id_estructura_org
      AND id_coleccion = p_id_coleccion;

    -- Validar el orden de recorrido
    IF p_orden_recorrido < 1 OR p_orden_recorrido > v_cantidad_salas + 1 THEN
        RAISE EXCEPTION 'El orden de recorrido debe estar entre 1 y %', v_cantidad_salas + 1;
    END IF;

    -- Si el orden ya existe, desplazar los órdenes mayores o iguales en +1
    UPDATE colecciones_salas
    SET orden_recorrido = orden_recorrido + 1
    WHERE id_museo = p_id_museo
      AND id_estructura_org = p_id_estructura_org
      AND id_coleccion = p_id_coleccion
      AND orden_recorrido >= p_orden_recorrido;

    -- Insertar la sala en la colección
    INSERT INTO colecciones_salas (
        id_museo, id_estructura_org, id_coleccion,
        id_estructura_fis, id_sala, orden_recorrido
    ) VALUES (
        p_id_museo, p_id_estructura_org, p_id_coleccion,
        p_id_estructura_fis, p_id_sala, p_orden_recorrido
    );
END;
$$;


-- obtener orden de recorrido de salas de una colección
CREATE OR REPLACE FUNCTION obtener_orden_de_salas_por_coleccion(
    p_id_museo INTEGER,
    p_id_coleccion INTEGER
)
RETURNS TABLE(id_sala INTEGER, nombre VARCHAR, orden_recorrido INTEGER) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        cs.id_sala, 
        s.nombre, 
        cs.orden_recorrido
    FROM colecciones_salas cs
    JOIN salas_exp s ON
        cs.id_museo = s.id_museo
        AND cs.id_estructura_fis = s.id_estructura_fis
        AND cs.id_sala = s.id_sala
    WHERE cs.id_museo = p_id_museo
      AND cs.id_coleccion = p_id_coleccion
    ORDER BY cs.orden_recorrido ASC;
END;
$$ LANGUAGE plpgsql;


-- Buscar obras por criterios (artista, colección, periodo, sala)
CREATE OR REPLACE FUNCTION buscar_obras(
    p_nombre_artista TEXT DEFAULT NULL,
    p_id_coleccion   INT  DEFAULT NULL,
    p_periodo        DATE DEFAULT NULL,
    p_id_sala        INT  DEFAULT NULL
)
RETURNS TABLE (
    id_obra       INT,
    nombre_obra   TEXT,
    nombre_artista TEXT,
    tipo          CHAR(1),
    periodo       DATE,
    id_sala       INT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    o.id_obra,
    o.nombre::TEXT,
    CONCAT(a.nombre, ' ', a.apellido)::TEXT,
    o.tipo,
    o.periodo,
    o.id_sala
  FROM OBRAS o
  JOIN OBRAS_ARTISTAS oa ON o.id_obra = oa.id_obra
  JOIN ARTISTAS a        ON a.id_artista = oa.id_artista
  WHERE
    (p_nombre_artista IS NULL
     OR (
         a.nombre                 ILIKE '%' || p_nombre_artista || '%' 
      OR a.apellido               ILIKE '%' || p_nombre_artista || '%'
      OR a.nombre_artistico       ILIKE '%' || p_nombre_artista || '%'
      OR (a.nombre || ' ' || a.apellido) ILIKE '%' || p_nombre_artista || '%'
     )
    )
    AND (p_id_coleccion IS NULL OR EXISTS (
          SELECT 1 
            FROM HISTORICOS_MOVIMIENTOS h 
           WHERE h.id_obra      = o.id_obra 
             AND h.id_coleccion = p_id_coleccion
        ))
    AND (p_periodo IS NULL OR o.periodo = p_periodo)
    AND (p_id_sala  IS NULL OR o.id_sala = p_id_sala);
END;
$$ LANGUAGE plpgsql;



--Registrar movimiento de una obra (Compra, donación, adquisicion)
CREATE OR REPLACE FUNCTION registrar_movimiento_obra(
    p_id_museo INT,
    p_id_obra INT,
    p_tipo_llegada CHAR,
    p_destacada BOOLEAN,
    p_orden_recomendado INT,
    p_valor NUMERIC,
    p_id_estructura_fis INT,
    p_id_sala INT,
    p_id_estructura_org INT,
    p_id_coleccion INT,
    p_num_expediente INT,
    p_id_museo_origen INT DEFAULT NULL,
    p_fecha_inicio DATE DEFAULT CURRENT_DATE
) RETURNS VOID AS $$
BEGIN
    INSERT INTO HISTORICOS_MOVIMIENTOS (
        id_museo, id_obra, fecha_inicio, tipo_llegada, destacada,
        orden_recomendado, valor_monetario, id_estructura_fis, id_sala,
        id_estructura_org, id_coleccion, num_expediente, id_museo_origen
    )
    VALUES (
        p_id_museo, p_id_obra, p_fecha_inicio, p_tipo_llegada, p_destacada,
        p_orden_recomendado, p_valor, p_id_estructura_fis, p_id_sala,
        p_id_estructura_org, p_id_coleccion, p_num_expediente, p_id_museo_origen
    );
END;
$$ LANGUAGE plpgsql;



--Consultar obras no disponibles actualmente (por mantenimiento o restauración)
CREATE OR REPLACE FUNCTION consultar_obras_no_disponibles(
    p_fecha DATE DEFAULT CURRENT_DATE
)
RETURNS TABLE (
    id_obra INT,
    nombre_obra VARCHAR,
    motivo TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT o.id_obra, o.nombre, 'En mantenimiento/restauración' AS motivo
    FROM OBRAS o
    JOIN HISTORICOS_MOVIMIENTOS h ON o.id_obra = h.id_obra
    JOIN REGISTROS_ACT_REALIZADAS r ON 
        h.id_museo = r.id_museo AND 
        h.id_obra = r.id_obra AND 
        h.id_cat_museo = r.id_cat_museo
    WHERE 
        r.fecha_fin IS NULL OR p_fecha BETWEEN r.fecha_inicio AND r.fecha_fin;
END;
$$ LANGUAGE plpgsql;

-- Obtener movilidad de una obra (histórico de movimientos)
CREATE OR REPLACE FUNCTION obtener_movilidad_obra(p_id_obra INTEGER)
RETURNS TABLE (
    nombre_museo VARCHAR,
    fecha_llegada DATE,
    sala VARCHAR,
    piso VARCHAR,
    edificio VARCHAR,
    fecha_salida DATE,
    destacada BOOLEAN,
    valor_monetario NUMERIC,
    tipo_llegada VARCHAR,
    museo_donante VARCHAR,
    nombre_coleccion VARCHAR,
    num_expediente INTEGER,
    responsable_nombre VARCHAR,
    responsable_apellido VARCHAR,
    nombre_estructura_org VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        m.nombre AS nombre_museo,
        h.fecha_inicio AS fecha_llegada,
        se.nombre AS sala,
        piso.nombre AS piso,
        edificio.nombre AS edificio,
        h.fecha_fin AS fecha_salida,
        h.destacada,
        h.valor_monetario,
        CASE 
            WHEN h.tipo_llegada = 'A' THEN 'ADQUISICION'
            WHEN h.tipo_llegada = 'C' THEN 'COMPRA'
            WHEN h.tipo_llegada = 'D' THEN 'DONACION'
            ELSE 'OTRO'
        END::VARCHAR AS tipo_llegada,
        m2.nombre AS museo_donante,
        c.nombre_coleccion,
        e.num_expediente,
        e.primer_nombre,
        e.primer_apellido,
        eo.nombre AS nombre_estructura_org
    FROM HISTORICOS_MOVIMIENTOS h
    JOIN MUSEOS m ON m.id_museo = h.id_museo
    LEFT JOIN MUSEOS m2 ON m2.id_museo = h.id_museo_origen
    JOIN SALAS_EXP se ON se.id_museo = h.id_museo AND se.id_estructura_fis = h.id_estructura_fis AND se.id_sala = h.id_sala
    JOIN ESTRUCTURAS_FISICAS piso ON piso.id_museo = se.id_museo AND piso.id_estructura_fis = se.id_estructura_fis AND piso.tipo = 'P'
    LEFT JOIN ESTRUCTURAS_FISICAS edificio ON edificio.id_museo = piso.id_museo_padre AND edificio.id_estructura_fis = piso.id_padre AND edificio.tipo = 'E'
    JOIN COLECCIONES c ON c.id_museo = h.id_museo AND c.id_estructura_org = h.id_estructura_org AND c.id_coleccion = h.id_coleccion
    JOIN EMPLEADOS_PROFESIONALES e ON e.num_expediente = h.num_expediente
    JOIN ESTRUCTURAS_ORGANIZACIONALES eo ON eo.id_museo = h.id_museo AND eo.id_estructura_org = h.id_estructura_org
    WHERE h.id_obra = p_id_obra
    ORDER BY h.fecha_inicio DESC;
END;
$$ LANGUAGE plpgsql;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------
-- REQUERIMIENTO 4 - PLANEACION Y EJECUCION DE EVENTOS --
-----------------------------------------------------------------------

-- Registrar un evento en el museo
CREATE OR REPLACE PROCEDURE registrar_evento(
    p_id_museo INTEGER,
    p_titulo VARCHAR,
    p_fecha_inicio DATE,
    p_fecha_fin DATE,
    p_precio_persona NUMERIC(5,2),
    p_institucion_educativa VARCHAR,
    p_id_estructura_fis INTEGER,
    p_id_sala INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Validar existencia del museo
    IF NOT EXISTS (SELECT 1 FROM museos WHERE id_museo = p_id_museo) THEN
        RAISE EXCEPTION 'El museo especificado no existe.';
    END IF;

    -- Validar existencia de la sala si se especifica
    IF p_id_estructura_fis IS NOT NULL AND p_id_sala IS NOT NULL THEN
        IF NOT EXISTS (
            SELECT 1 FROM salas_exp
            WHERE id_museo = p_id_museo
              AND id_estructura_fis = p_id_estructura_fis
              AND id_sala = p_id_sala
        ) THEN
            RAISE EXCEPTION 'La sala especificada no existe para el museo.';
        END IF;
    END IF;

    -- Validar fechas
    IF p_fecha_fin < p_fecha_inicio THEN
        RAISE EXCEPTION 'La fecha de fin no puede ser menor que la fecha de inicio.';
    END IF;

    -- Insertar el evento
    INSERT INTO eventos(
        id_museo, titulo, fecha_inicio, fecha_fin, precio_persona,
        institucion_educativa, id_estructura_fis, id_sala
    ) VALUES (
        p_id_museo, p_titulo, p_fecha_inicio, p_fecha_fin, p_precio_persona,
        p_institucion_educativa, NULL,p_id_estructura_fis, p_id_sala
    );
END;
$$;


-- Actualizar la cantidad de personas que asistieron a un evento
CREATE OR REPLACE PROCEDURE actualizar_cantidad_personas_evento(
    p_id_evento INTEGER,
    p_nueva_cantidad INTEGER
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Validar que el evento exista
    IF NOT EXISTS (SELECT 1 FROM eventos WHERE id_evento = p_id_evento) THEN
        RAISE EXCEPTION 'El evento especificado no existe.';
    END IF;

    -- Validar que la cantidad sea no negativa
    IF p_nueva_cantidad < 0 THEN
        RAISE EXCEPTION 'La cantidad de personas no puede ser negativa.';
    END IF;

    -- Actualizar la cantidad de personas
    UPDATE eventos
    SET cantidad_personas = p_nueva_cantidad
    WHERE id_evento = p_id_evento;
END;
$$;


-- Generar múltiples entradas para un museo y tipo
CREATE OR REPLACE PROCEDURE generar_entradas(
    p_id_museo INTEGER,
    p_tipo CHAR,
    p_cantidad INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_precio NUMERIC(4,2);
    i INTEGER;
BEGIN
    -- Validar tipo
    IF p_tipo NOT IN ('G', 'R') THEN
        RAISE EXCEPTION 'Tipo de entrada inválido. Solo G o R.';
    END IF;

    -- Validar cantidad
    IF p_cantidad < 1 THEN
        RAISE EXCEPTION 'La cantidad debe ser mayor o igual a 1.';
    END IF;

    -- Buscar precio vigente para el tipo y museo
    SELECT precio INTO v_precio
    FROM tipos_tickets
    WHERE id_museo = p_id_museo
      AND tipo = p_tipo
      AND (fecha_fin IS NULL OR fecha_fin >= CURRENT_DATE)
      AND fecha_inicio <= CURRENT_DATE
    ORDER BY fecha_inicio DESC
    LIMIT 1;

    IF v_precio IS NULL THEN
        RAISE EXCEPTION 'No hay precio vigente para ese tipo de entrada en el museo.';
    END IF;

    -- Insertar entradas
    FOR i IN 1..p_cantidad LOOP
        INSERT INTO entradas(id_museo, fecha_hora_emision, monto, tipo)
        VALUES (p_id_museo, DATE_TRUNC('second', CURRENT_TIMESTAMP), v_precio, p_tipo);
    END LOOP;
END;
$$;


-- Agregar un nuevo tipo de ticket
CREATE OR REPLACE FUNCTION agregar_tipo_ticket(
    p_id_museo INTEGER,
    p_fecha_inicio DATE,
    p_precio NUMERIC(8,2),
    p_tipo CHAR,
    p_fecha_fin DATE DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO tipos_tickets(id_museo, fecha_inicio, fecha_fin, precio, tipo)
    VALUES (p_id_museo, p_fecha_inicio, p_fecha_fin, p_precio, UPPER(p_tipo));
END;
$$ LANGUAGE plpgsql;


-- Actualizar el precio de un tipo de ticket
CREATE OR REPLACE FUNCTION actualizar_fecha_fin_tipo_ticket(
    p_id_museo INTEGER,
    p_tipo CHAR,
    p_nueva_fecha_fin DATE
)
RETURNS VOID AS $$
BEGIN
    UPDATE tipos_tickets
    SET fecha_fin = p_nueva_fecha_fin
    WHERE id_museo = p_id_museo
      AND tipo = UPPER(p_tipo)
      AND fecha_fin IS NULL;
END;
$$ LANGUAGE plpgsql;


-----------------------------------------------------------------------
-- REQUERIMIENTO 4 - ADMINISTRACION DE INGRESOS --
-----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION calcular_ingresos_museo_anio(
    p_id_museo INTEGER,
    p_anio INTEGER
)
RETURNS NUMERIC(12,2) AS $$
DECLARE
    v_total_entradas NUMERIC(12,2);
    v_total_eventos NUMERIC(12,2);
BEGIN
    -- Suma de ingresos por entradas en el año
    SELECT SUM(monto) INTO v_total_entradas
    FROM entradas
    WHERE id_museo = p_id_museo
      AND EXTRACT(YEAR FROM fecha_hora_emision) = p_anio;

    -- Suma de ingresos por eventos en el año
    SELECT SUM(precio_persona * cantidad_persona) INTO v_total_eventos
    FROM eventos
    WHERE id_museo = p_id_museo
      AND EXTRACT(YEAR FROM fecha_inicio) = p_anio
      AND cantidad_persona IS NOT NULL;

    RETURN COALESCE(v_total_entradas, 0) + COALESCE(v_total_eventos, 0);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION ingresos_museos_anio(p_anio INTEGER)
RETURNS TABLE (
    museo VARCHAR,
    total_ingresos NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        m.nombre AS museo,
        calcular_ingresos_museo_anio(m.id_museo, p_anio) AS total_ingresos
    FROM 
        museos m
    ORDER BY 
        total_ingresos DESC;
END;
$$ LANGUAGE plpgsql;


-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ============================ Procedimientos para formularios y reportes  ==================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------
--                 FORMULARIO RESUMEN HISTORICO                      --
-----------------------------------------------------------------------
--insertar resumen historico
CREATE OR REPLACE PROCEDURE registrar_resumen_historico_museo(
  p_id_museo INTEGER,
  p_anio INTEGER,
  p_hechos TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
  IF p_anio < 1800 OR p_anio > EXTRACT(YEAR FROM CURRENT_DATE) THEN
    RAISE EXCEPTION 'Año fuera de rango válido';
  END IF;
  IF NOT EXISTS (SELECT 1 FROM museos WHERE id_museo = p_id_museo) THEN
    RAISE EXCEPTION 'Museo no existe';
  END IF;
  IF EXISTS (SELECT 1 FROM resumenes_historicos_museo WHERE id_museo = p_id_museo AND anio = p_anio) THEN
    RAISE EXCEPTION 'Ya existe un resumen para ese museo y año';
  END IF;
  INSERT INTO resumenes_historicos_museo(id_museo, anio, hechos)
  VALUES (p_id_museo, p_anio, p_hechos);
END;
$$;


-----------------------------------------------------------------------
--                            FICHA OBRAS                            --
-----------------------------------------------------------------------

-- funcion obtener informacion de una obra
CREATE OR REPLACE FUNCTION obtener_detalle_obra(p_id_obra INTEGER)
RETURNS TABLE(
    id_obra INTEGER,
    nombre VARCHAR,
    coleccion VARCHAR,
    periodo DATE,
    dimensiones VARCHAR,
    tipo CHAR,
    estilos VARCHAR,
    caracteristicas VARCHAR,
    artistas VARCHAR[], 
    ubicacion VARCHAR,
    metodo_adquisicion VARCHAR,
    fecha_adquisicion DATE
) AS $$
DECLARE
    v_id_museo INTEGER;
    v_fecha_inicio_actual DATE;
    v_fecha_adquisicion DATE;
    v_metodo_adquisicion VARCHAR;
    v_fecha_inicio_anterior DATE;
    v_fecha_fin_anterior DATE;
    v_hubo_otro_museo BOOLEAN;
BEGIN
    -- Museo y fecha_inicio del registro activo
    SELECT hm.id_museo, hm.fecha_inicio
    INTO v_id_museo, v_fecha_inicio_actual
    FROM historicos_movimientos hm
    WHERE hm.id_obra = p_id_obra AND hm.fecha_fin IS NULL
    ORDER BY hm.fecha_inicio DESC
    LIMIT 1;

    IF v_id_museo IS NULL THEN
        RETURN QUERY
        SELECT
            o.id_obra, o.nombre, NULL, o.periodo, o.dimension, o.tipo, o.estilos, o.caract_mat_tec,
            (
                SELECT array_agg(
                    'Nombre: ' || a.nombre || '; Apellido: ' || a.apellido || '; Nombre artistico: ' || COALESCE(a.nombre_artistico, '')
                )::VARCHAR[]
                FROM obras_artistas oa
                JOIN artistas a ON oa.id_artista = a.id_artista
                WHERE oa.id_obra = o.id_obra
            ),
            NULL, NULL, NULL
        FROM obras o
        WHERE o.id_obra = p_id_obra;
        RETURN;
    END IF;

    -- Buscar la fecha de adquisición real (recursivo hacia atrás)
    v_fecha_adquisicion := v_fecha_inicio_actual;
    v_metodo_adquisicion := (
        SELECT CASE hm.tipo_llegada WHEN 'C' THEN 'Compra' WHEN 'D' THEN 'Donación' WHEN 'A' THEN 'Adquisición' ELSE 'Desconocido' END
        FROM historicos_movimientos hm
        WHERE hm.id_obra = p_id_obra AND hm.id_museo = v_id_museo AND hm.fecha_inicio = v_fecha_inicio_actual
        LIMIT 1
    );

    LOOP
        SELECT hm.fecha_inicio, hm.fecha_fin
        INTO v_fecha_inicio_anterior, v_fecha_fin_anterior
        FROM historicos_movimientos hm
        WHERE hm.id_obra = p_id_obra
          AND hm.id_museo = v_id_museo
          AND hm.fecha_inicio < v_fecha_adquisicion
        ORDER BY hm.fecha_inicio DESC
        LIMIT 1;

        EXIT WHEN v_fecha_inicio_anterior IS NULL;

        SELECT EXISTS (
            SELECT 1
            FROM historicos_movimientos hm
            WHERE hm.id_obra = p_id_obra
              AND hm.id_museo <> v_id_museo
              AND hm.fecha_inicio > v_fecha_fin_anterior
              AND hm.fecha_inicio < v_fecha_adquisicion
        ) INTO v_hubo_otro_museo;

        IF v_hubo_otro_museo THEN
            EXIT;
        ELSE
            v_fecha_adquisicion := v_fecha_inicio_anterior;
            v_metodo_adquisicion := (
                SELECT CASE hm.tipo_llegada WHEN 'C' THEN 'Compra' WHEN 'D' THEN 'Donación' WHEN 'A' THEN 'Adquisición' ELSE 'Desconocido' END
                FROM historicos_movimientos hm
                WHERE hm.id_obra = p_id_obra AND hm.id_museo = v_id_museo AND hm.fecha_inicio = v_fecha_inicio_anterior
                LIMIT 1
            );
        END IF;
    END LOOP;

    RETURN QUERY
    SELECT
        o.id_obra,
        o.nombre,
        (
            SELECT c.nombre_coleccion
            FROM historicos_movimientos hm
            JOIN colecciones c ON hm.id_museo = c.id_museo AND hm.id_estructura_org = c.id_estructura_org AND hm.id_coleccion = c.id_coleccion
            WHERE hm.id_obra = o.id_obra AND hm.fecha_fin IS NULL
            LIMIT 1
        ),
        o.periodo,
        o.dimension,
        o.tipo,
        o.estilos,
        o.caract_mat_tec,
        (
            SELECT array_agg(
                'Nombre: ' || a.nombre || '; Apellido: ' || a.apellido || '; Nombre artistico: ' || COALESCE(a.nombre_artistico, '')
            )::VARCHAR[]
            FROM obras_artistas oa
            JOIN artistas a ON oa.id_artista = a.id_artista
            WHERE oa.id_obra = o.id_obra
        ),
        (
            SELECT 
                (m.nombre || ', ' || ef.nombre || ', Sala ' || s.nombre)::VARCHAR
            FROM historicos_movimientos hm
            JOIN museos m ON hm.id_museo = m.id_museo
            JOIN estructuras_fisicas ef ON hm.id_museo = ef.id_museo AND hm.id_estructura_fis = ef.id_estructura_fis
            JOIN salas_exp s ON hm.id_museo = s.id_museo AND hm.id_estructura_fis = s.id_estructura_fis AND hm.id_sala = s.id_sala
            WHERE hm.id_obra = o.id_obra AND hm.fecha_fin IS NULL
            LIMIT 1
        ),
        v_metodo_adquisicion,
        v_fecha_adquisicion
    FROM obras o
    WHERE o.id_obra = p_id_obra;
END;
$$ LANGUAGE plpgsql;


-- Obtener obras por museo y tipo
CREATE OR REPLACE FUNCTION obtener_obras(p_id_museo INTEGER DEFAULT NULL, p_tipo CHAR DEFAULT NULL)
RETURNS TABLE(id_obra INTEGER, nombre VARCHAR, tipo CHAR, id_museo INTEGER) AS $$
BEGIN
    RETURN QUERY
    SELECT o.id_obra, o.nombre, o.tipo, o.id_museo
    FROM obras o
    WHERE (p_id_museo IS NULL OR o.id_museo = p_id_museo)
      AND (p_tipo IS NULL OR o.tipo = p_tipo);
END;
$$ LANGUAGE plpgsql;


--obtener salas por coleccion
CREATE OR REPLACE FUNCTION obtener_salas_por_coleccion(
    p_id_museo INTEGER,
    p_id_coleccion INTEGER
)
RETURNS TABLE(id_sala INTEGER, nombre VARCHAR) AS $$
BEGIN
    RETURN QUERY
    SELECT s.id_sala, s.nombre
    FROM colecciones_salas cs
    JOIN salas_exp s ON
        cs.id_museo = s.id_museo
        AND cs.id_estructura_fis = s.id_estructura_fis
        AND cs.id_sala = s.id_sala
    WHERE cs.id_museo = p_id_museo
      AND cs.id_coleccion = p_id_coleccion;
END;
$$ LANGUAGE plpgsql;


--obtener empleados profesionales por museo
CREATE OR REPLACE FUNCTION obtener_empleados_prof_por_museo(p_id_museo INTEGER)
RETURNS TABLE(num_expediente INTEGER, nombre_completo TEXT) AS $$
BEGIN
  RETURN QUERY
    SELECT emp.num_expediente, emp.primer_nombre || ' ' || emp.primer_apellido AS nombre_completo
    FROM empleados_profesionales emp
    JOIN historicos_empleados his ON emp.num_expediente = his.num_expediente
    WHERE his.id_museo = p_id_museo AND his.fecha_fin IS NULL;
END;
$$ LANGUAGE plpgsql;


-- Obtener colecciones por museo
CREATE OR REPLACE FUNCTION obtener_colecciones_por_museo(p_museo_id INTEGER)
RETURNS TABLE(
  id_coleccion      INTEGER,
  id_estructura_org INTEGER,
  nombre            TEXT,
  orden_recorrido   TEXT
)
LANGUAGE sql
AS $$
  SELECT
    c.id_coleccion,
    c.id_estructura_org,
    c.nombre_coleccion AS nombre,
    c.orden_recorrido
  FROM colecciones c
  WHERE c.id_museo = p_museo_id
$$;


-- Validar que la sala pertenezca a la colección
CREATE OR REPLACE FUNCTION validar_sala_en_coleccion(
    p_id_museo INTEGER,
    p_id_coleccion INTEGER,
    p_id_sala INTEGER
) RETURNS VOID AS $$
DECLARE
    v_existe INTEGER;
BEGIN
    SELECT 1 INTO v_existe
      FROM COLECCIONES_SALAS
     WHERE id_museo = p_id_museo
       AND id_coleccion = p_id_coleccion
       AND id_sala = p_id_sala
     LIMIT 1;
    IF v_existe IS NULL THEN
        RAISE EXCEPTION 'La sala % no pertenece a la colección % en el museo %', p_id_sala, p_id_coleccion, p_id_museo;
    END IF;
END;
$$ LANGUAGE plpgsql;


-- Validar orden de recorrido si es destacada
CREATE OR REPLACE FUNCTION validar_orden_destacado(
    p_destacada BOOLEAN,
    p_orden_recomendado INTEGER
) RETURNS VOID AS $$
BEGIN
    IF p_destacada AND (p_orden_recomendado IS NULL OR p_orden_recomendado < 1) THEN
        RAISE EXCEPTION 'Si la obra es destacada, el orden de recorrido debe ser mayor o igual a 1';
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Obtener id_estructura_fis
CREATE OR REPLACE FUNCTION obtener_id_estructura_fis(
    p_id_museo INTEGER,
    p_id_sala INTEGER
) RETURNS INTEGER AS $$
DECLARE
    v_id_estructura_fis INTEGER;
BEGIN
    SELECT id_estructura_fis INTO v_id_estructura_fis
      FROM SALAS_EXP
     WHERE id_museo = p_id_museo AND id_sala = p_id_sala
     LIMIT 1;
    IF v_id_estructura_fis IS NULL THEN
        RAISE EXCEPTION 'No se encontró la estructura física para la sala %', p_id_sala;
    END IF;
    RETURN v_id_estructura_fis;
END;
$$ LANGUAGE plpgsql;

-- Obtener id_estructura_org
CREATE OR REPLACE FUNCTION obtener_id_estructura_org(
    p_id_museo INTEGER,
    p_id_coleccion INTEGER
) RETURNS INTEGER AS $$
DECLARE
    v_id_estructura_org INTEGER;
BEGIN
    SELECT id_estructura_org INTO v_id_estructura_org
      FROM COLECCIONES
     WHERE id_museo = p_id_museo AND id_coleccion = p_id_coleccion
     LIMIT 1;
    IF v_id_estructura_org IS NULL THEN
        RAISE EXCEPTION 'No se encontró la estructura organizacional para la colección %', p_id_coleccion;
    END IF;
    RETURN v_id_estructura_org;
END;
$$ LANGUAGE plpgsql;


-- Ajustar orden de destacados si hay conflicto (se quiere agg una obra destacada en un orden ya ocupado)
CREATE OR REPLACE PROCEDURE ajustar_orden_destacados(
    p_id_museo INTEGER,
    p_orden_recomendado INTEGER
)
LANGUAGE plpgsql AS $$
DECLARE
    v_cantidad_destacadas INTEGER;
BEGIN
    -- Contar cuántas obras destacadas hay actualmente en el museo
    SELECT COUNT(*) INTO v_cantidad_destacadas
      FROM HISTORICOS_MOVIMIENTOS
     WHERE id_museo = p_id_museo
       AND destacada = TRUE
       AND fecha_fin IS NULL;

    -- Validar que el orden sea secuencial (entre 1 y cantidad+1)
    IF p_orden_recomendado < 1 OR p_orden_recomendado > v_cantidad_destacadas + 1 THEN
        RAISE EXCEPTION 'El orden de recorrido debe estar entre 1 y %', v_cantidad_destacadas + 1;
    END IF;

    -- Si el orden ya existe, desplazar todos los órdenes mayores o iguales en +1
    UPDATE HISTORICOS_MOVIMIENTOS
       SET orden_recomendado = orden_recomendado + 1
     WHERE id_museo = p_id_museo
       AND destacada = TRUE
       AND orden_recomendado >= p_orden_recomendado
       AND fecha_fin IS NULL;
END;
$$;

-- Insertar obra y devolver id
CREATE OR REPLACE FUNCTION insertar_obra(
    p_nombre VARCHAR,
    p_dimension VARCHAR,
    p_tipo CHAR(1),
    p_estilos VARCHAR,
    p_caract_mat_tec VARCHAR,
    p_id_sala INTEGER,
    p_id_estructura_fis INTEGER,
    p_id_museo INTEGER,
    p_periodo DATE
) RETURNS INTEGER AS $$
DECLARE
    v_id_obra INTEGER;
BEGIN
    INSERT INTO OBRAS (
        nombre, dimension, tipo, estilos, caract_mat_tec,
        id_sala, id_estructura_fis, id_museo, periodo
    ) VALUES (
        UPPER(p_nombre), UPPER(p_dimension), UPPER(p_tipo), UPPER(p_estilos), UPPER(p_caract_mat_tec),
        p_id_sala, p_id_estructura_fis, p_id_museo, p_periodo
    )
    RETURNING id_obra INTO v_id_obra;
    RETURN v_id_obra;
END;
$$ LANGUAGE plpgsql;

-- Insertar artista nuevo y relacionar con obra
CREATE OR REPLACE PROCEDURE insertar_artista_y_relacionar(
    p_artista_str VARCHAR,
    p_id_obra INTEGER
)
LANGUAGE plpgsql AS $$
DECLARE
    v_caract_est_tec VARCHAR;
    v_nombre VARCHAR;
    v_apellido VARCHAR;
    v_nombre_artistico VARCHAR;
    v_fecha_nac DATE;
    v_fecha_def DATE;
    v_id_artista INTEGER;
BEGIN
    v_caract_est_tec   := UPPER(split_part(p_artista_str, '|', 1));
    v_nombre           := UPPER(split_part(p_artista_str, '|', 2));
    v_apellido         := UPPER(split_part(p_artista_str, '|', 3));
    v_nombre_artistico := UPPER(split_part(p_artista_str, '|', 4));
    v_fecha_nac        := NULLIF(split_part(p_artista_str, '|', 5), '')::DATE;
    v_fecha_def        := NULLIF(split_part(p_artista_str, '|', 6), '')::DATE;

    INSERT INTO ARTISTAS (
        caract_est_tec, nombre, apellido, nombre_artistico, fecha_nac, fecha_def
    ) VALUES (
        v_caract_est_tec, v_nombre, v_apellido, v_nombre_artistico, v_fecha_nac, v_fecha_def
    )
    RETURNING id_artista INTO v_id_artista;

    INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista)
    VALUES (p_id_obra, v_id_artista);
END;
$$;

-- Relacionar artistas existentes con obra
CREATE OR REPLACE PROCEDURE relacionar_artistas_existentes(
    p_artistas_existentes INTEGER[],
    p_id_obra INTEGER
)
LANGUAGE plpgsql AS $$
DECLARE
    v_id_artista INTEGER;
BEGIN
    IF p_artistas_existentes IS NOT NULL THEN
        FOREACH v_id_artista IN ARRAY p_artistas_existentes
        LOOP
            INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista)
            VALUES (p_id_obra, v_id_artista);
        END LOOP;
    END IF;
END;
$$;

-- Insertar en historicos_movimientos
CREATE OR REPLACE PROCEDURE insertar_historico_movimiento(
    p_id_museo INTEGER,
    p_id_obra INTEGER,
    p_fecha_inicio DATE,
    p_tipo_llegada CHAR(1),
    p_destacada BOOLEAN,
    p_orden_recomendado INTEGER,
    p_valor_monetario NUMERIC,
    p_id_estructura_fis INTEGER,
    p_id_sala INTEGER,
    p_id_estructura_org INTEGER,
    p_id_coleccion INTEGER,
    p_num_expediente INTEGER,
    p_id_museo_origen INTEGER
)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO HISTORICOS_MOVIMIENTOS (
        id_museo, id_obra, fecha_inicio, tipo_llegada, destacada,
        orden_recomendado, valor_monetario, id_estructura_fis, id_sala,
        id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin
    ) VALUES (
        p_id_museo, p_id_obra, p_fecha_inicio, UPPER(p_tipo_llegada), p_destacada,
        p_orden_recomendado, p_valor_monetario, p_id_estructura_fis, p_id_sala,
        p_id_estructura_org, p_id_coleccion, p_num_expediente, p_id_museo_origen, NULL
    );
END;
$$;

-- Procedimiento para registrar una obra (procedimiento principal)
CREATE OR REPLACE PROCEDURE registrar_obra(
    p_nombre VARCHAR,
    p_dimension VARCHAR,
    p_tipo CHAR(1),
    p_estilos VARCHAR,
    p_caract_mat_tec VARCHAR,
    p_id_sala INTEGER,
    p_id_museo INTEGER,
    p_periodo DATE,
    p_artistas_existentes INTEGER[],
    p_nuevos_artistas VARCHAR[],
    p_fecha_inicio DATE,
    p_tipo_llegada CHAR(1),
    p_destacada BOOLEAN,
    p_orden_recomendado INTEGER,
    p_valor_monetario NUMERIC,
    p_id_coleccion INTEGER,
    p_num_expediente INTEGER,
    p_id_museo_origen INTEGER DEFAULT NULL
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_id_estructura_fis INTEGER;
    v_id_estructura_org INTEGER;
    v_id_obra INTEGER;
    v_artista_str VARCHAR;
BEGIN
    -- Validaciones
    PERFORM validar_sala_en_coleccion(p_id_museo, p_id_coleccion, p_id_sala);
    PERFORM validar_orden_destacado(p_destacada, p_orden_recomendado);

    -- Obtener claves foráneas
    v_id_estructura_fis := obtener_id_estructura_fis(p_id_museo, p_id_sala);
    v_id_estructura_org := obtener_id_estructura_org(p_id_museo, p_id_coleccion);

    -- Insertar obra
    v_id_obra := insertar_obra(
        p_nombre, p_dimension, p_tipo, p_estilos, p_caract_mat_tec,
        p_id_sala, v_id_estructura_fis, p_id_museo, p_periodo
    );

    -- Insertar artistas nuevos y relacionar
    IF p_nuevos_artistas IS NOT NULL THEN
        FOREACH v_artista_str IN ARRAY p_nuevos_artistas
        LOOP
            CALL insertar_artista_y_relacionar(v_artista_str, v_id_obra);
        END LOOP;
    END IF;

    -- Relacionar artistas existentes
    CALL relacionar_artistas_existentes(p_artistas_existentes, v_id_obra);

    -- Ajustar orden de destacados si es necesario
    IF p_destacada THEN
        CALL ajustar_orden_destacados(p_id_museo, p_orden_recomendado);
    END IF;

    -- Insertar en historicos_movimientos
    CALL insertar_historico_movimiento(
        p_id_museo, v_id_obra, p_fecha_inicio, p_tipo_llegada, p_destacada,
        p_orden_recomendado, p_valor_monetario, v_id_estructura_fis, p_id_sala,
        v_id_estructura_org, p_id_coleccion, p_num_expediente, p_id_museo_origen
    );
END;
$$;


-----------------------------------------------------------------------
--                         FICHA ITINERARIO                          --
-----------------------------------------------------------------------

-- ITINERARIOS DE OBRAS DESTACADAS
CREATE OR REPLACE FUNCTION generar_itinerario_obras_destacadas(p_id_museo INTEGER)
RETURNS TABLE (
    nombre_obra VARCHAR,
    tipo_obra VARCHAR,
    artistas VARCHAR,
    sala VARCHAR,
    piso VARCHAR,
    edificio VARCHAR,
    orden_recomendado INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        o.nombre::VARCHAR AS nombre_obra,
        (CASE o.tipo WHEN 'P' THEN 'Pintura' WHEN 'E' THEN 'Escultura' END)::VARCHAR AS tipo_obra,
        (
            SELECT string_agg((COALESCE(a.nombre, '') || ' ' || COALESCE(a.apellido, '')), ', ')::VARCHAR
            FROM OBRAS_ARTISTAS oa
            JOIN ARTISTAS a ON oa.id_artista = a.id_artista
            WHERE oa.id_obra = o.id_obra
        ) AS artistas,
        se.nombre::VARCHAR AS sala,
        ef_piso.nombre::VARCHAR AS piso,
        ef_edif.nombre::VARCHAR AS edificio,
        hm.orden_recomendado
    FROM HISTORICOS_MOVIMIENTOS hm
    JOIN OBRAS o ON hm.id_obra = o.id_obra
    JOIN SALAS_EXP se ON hm.id_museo = se.id_museo AND hm.id_estructura_fis = se.id_estructura_fis AND hm.id_sala = se.id_sala
    JOIN ESTRUCTURAS_FISICAS ef_piso ON se.id_museo = ef_piso.id_museo AND se.id_estructura_fis = ef_piso.id_estructura_fis
    LEFT JOIN ESTRUCTURAS_FISICAS ef_edif ON ef_piso.id_museo_padre = ef_edif.id_museo AND ef_piso.id_padre = ef_edif.id_estructura_fis
    WHERE hm.id_museo = p_id_museo
      AND hm.destacada = TRUE
      AND hm.fecha_fin IS NULL
    ORDER BY hm.orden_recomendado;
END;
$$ LANGUAGE plpgsql;


--ITINERARIOS DE COLECCIONES--
CREATE OR REPLACE FUNCTION generar_itinerario_colecciones(p_id_museo INTEGER)
RETURNS TABLE (
    nombre_coleccion VARCHAR,
    orden_coleccion INTEGER,
    nombre_sala VARCHAR,
    nombre_piso VARCHAR,
    nombre_edificio VARCHAR,
    orden_sala INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.nombre_coleccion::VARCHAR,
        c.orden_recorrido AS orden_coleccion,
        se.nombre::VARCHAR AS nombre_sala,
        piso.nombre::VARCHAR AS nombre_piso,
        edif.nombre::VARCHAR AS nombre_edificio,
        cs.orden_recorrido AS orden_sala
    FROM COLECCIONES c
    JOIN COLECCIONES_SALAS cs
      ON c.id_museo = cs.id_museo
     AND c.id_estructura_org = cs.id_estructura_org
     AND c.id_coleccion = cs.id_coleccion
    JOIN SALAS_EXP se
      ON cs.id_museo = se.id_museo
     AND cs.id_estructura_fis = se.id_estructura_fis
     AND cs.id_sala = se.id_sala
    JOIN ESTRUCTURAS_FISICAS piso
      ON se.id_museo = piso.id_museo
     AND se.id_estructura_fis = piso.id_estructura_fis
    LEFT JOIN ESTRUCTURAS_FISICAS edif
      ON piso.id_museo_padre = edif.id_museo
     AND piso.id_padre = edif.id_estructura_fis
    WHERE c.id_museo = p_id_museo
    ORDER BY c.orden_recorrido, cs.orden_recorrido;
END;
$$ LANGUAGE plpgsql;


-----------------------------------------------------------------------
--                          FICHA ARTISTA                            --
-----------------------------------------------------------------------
-- FUNCION: ficha_artista
CREATE OR REPLACE FUNCTION ficha_artista(p_id_artista INTEGER)
RETURNS TABLE (
    id_artista INTEGER,
    nombre_completo VARCHAR,
    nombre_artistico VARCHAR,
    fecha_nac DATE,
    fecha_def DATE,
    caract_est_tec VARCHAR,
    id_obra INTEGER,
    obra VARCHAR,
    tipo_obra VARCHAR,
    museo_exhibicion VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        a.id_artista,
        (a.nombre || ' ' || a.apellido)::varchar    AS nombre_completo,
        a.nombre_artistico,
        a.fecha_nac,
        a.fecha_def,
        a.caract_est_tec,
        o.id_obra,
        o.nombre        AS obra,
        (CASE o.tipo
            WHEN 'E' THEN 'Escultura'
            WHEN 'P' THEN 'Pintura'
            ELSE 'Desconocido'
        END)::varchar             AS tipo_obra,
        m.nombre        AS museo_exhibicion
    FROM ARTISTAS a
    LEFT JOIN OBRAS_ARTISTAS oa ON a.id_artista = oa.id_artista
    LEFT JOIN OBRAS          o  ON oa.id_obra    = o.id_obra
    LEFT JOIN MUSEOS         m  ON o.id_museo   = m.id_museo
    WHERE a.id_artista = p_id_artista;
END;
$$ LANGUAGE plpgsql;




-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ====================================== Triggers y Sus Funciones ===========================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------

-- Función del trigger
CREATE OR REPLACE FUNCTION fn_validar_empleado_profesional()
RETURNS TRIGGER AS $$
BEGIN
  -- Validar formato del documento
  PERFORM validar_formato_doc_identidad(UPPER(NEW.doc_identidad));

  -- Validar fecha de nacimiento
  PERFORM validar_fecha_nacimiento(NEW.fecha_nac);

  -- Forzar mayúsculas en los campos de texto
  NEW.doc_identidad := UPPER(NEW.doc_identidad);
  NEW.primer_nombre := UPPER(NEW.primer_nombre);
  NEW.segundo_nombre := UPPER(NEW.segundo_nombre);
  NEW.primer_apellido := UPPER(NEW.primer_apellido);
  NEW.segundo_apellido := UPPER(NEW.segundo_apellido);

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Trigger asociado
CREATE TRIGGER trg_validar_empleado_profesional
BEFORE INSERT OR UPDATE ON EMPLEADOS_PROFESIONALES
FOR EACH ROW
EXECUTE FUNCTION fn_validar_empleado_profesional();


-- Función del trigger
CREATE OR REPLACE FUNCTION fn_validar_formacion()
RETURNS TRIGGER AS $$
BEGIN
  -- Validar año
  PERFORM validar_anio_formacion(NEW.anio);

  -- Forzar mayúsculas
  NEW.nombre_titulo := UPPER(NEW.nombre_titulo);
  NEW.descripcion_especialidad := UPPER(NEW.descripcion_especialidad);

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger asociado
CREATE TRIGGER trg_validar_formacion
BEFORE INSERT OR UPDATE ON FORMACIONES_PROFESIONALES
FOR EACH ROW
EXECUTE FUNCTION fn_validar_formacion();


-- Trigger function para validar la jerarquía de niveles
CREATE OR REPLACE FUNCTION validar_nivel_jerarquia_organizacional()
RETURNS TRIGGER AS $$
DECLARE
    v_nivel_padre INTEGER;
BEGIN
    -- Solo validar si tiene padre
    IF NEW.id_estructura_org_padre IS NOT NULL THEN
        SELECT nivel INTO v_nivel_padre
        FROM ESTRUCTURAS_ORGANIZACIONALES
        WHERE id_museo = NEW.id_museo_padre AND id_estructura_org = NEW.id_estructura_org_padre;

        IF v_nivel_padre IS NULL THEN
            RAISE EXCEPTION 'El nivel especificado no existe.';
        END IF;

        IF NEW.nivel <> v_nivel_padre + 1 THEN
            RAISE EXCEPTION 'El nivel debe ser exactamente uno más que el nivel del padre (%).', v_nivel_padre;
        END IF;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Crear el trigger para inserciones y actualizaciones
CREATE TRIGGER validar_nivel_jerarquia_organizacional
BEFORE INSERT OR UPDATE ON ESTRUCTURAS_ORGANIZACIONALES
FOR EACH ROW
EXECUTE FUNCTION validar_nivel_jerarquia_organizacional();


--Trigger para validar que las entradas esten dentro del horario del museo
CREATE OR REPLACE FUNCTION validar_tipo_ticket_valido()
RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM TIPOS_TICKETS
        WHERE id_museo = NEW.id_museo
          AND tipo = NEW.tipo
          AND NEW.fecha_hora_emision::DATE >= fecha_inicio
          AND (fecha_fin IS NULL OR NEW.fecha_hora_emision::DATE <= fecha_fin)
    ) THEN
        RAISE EXCEPTION 'El tipo de ticket no está habilitado para esa fecha en este museo.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_tipo_ticket
BEFORE INSERT OR UPDATE ON ENTRADAS
FOR EACH ROW
EXECUTE FUNCTION validar_tipo_ticket_valido();


-- Triger para validar que no puedas crear un nuevo tipo ticket sin haber cerrado el otro 
CREATE OR REPLACE FUNCTION validar_tipo_ticket_unico()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.fecha_fin IS NULL THEN
        IF EXISTS (
            SELECT 1 FROM tipos_tickets
            WHERE id_museo = NEW.id_museo
              AND tipo = NEW.tipo
              AND fecha_fin IS NULL
        ) THEN
            RAISE EXCEPTION 'Ya existe un tipo ticket vigente (sin fecha fin) para ese museo y tipo.';
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_tipo_ticket_unico
BEFORE INSERT ON tipos_tickets
FOR EACH ROW
EXECUTE FUNCTION validar_tipo_ticket_unico();

--Validar que el lugar del museo sea tipo 'C' (ciudad)
CREATE OR REPLACE FUNCTION validar_lugar_ciudad()
RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM LUGARES_GEOGRAFICOS
        WHERE id_lugar = NEW.id_lugar AND tipo = 'C'
    ) THEN
        RAISE EXCEPTION 'El lugar asignado al museo debe ser una ciudad (tipo = C)';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_lugar_ciudad
BEFORE INSERT OR UPDATE ON MUSEOS
FOR EACH ROW
EXECUTE FUNCTION validar_lugar_ciudad();

--Verificar que una obra no se ubique en una sala cerrada en la fecha
CREATE OR REPLACE FUNCTION validar_sala_activa_para_obra()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_CIERRES
        WHERE id_museo = NEW.id_museo
          AND id_estructura_fis = NEW.id_estructura_fis
          AND id_sala = NEW.id_sala
          AND NEW.periodo BETWEEN fecha_inicio AND COALESCE(fecha_fin, NEW.periodo)
    ) THEN
        RAISE EXCEPTION 'No se puede asignar obra a una sala que está cerrada en esa fecha';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_sala_obra
BEFORE INSERT OR UPDATE ON OBRAS
FOR EACH ROW
EXECUTE FUNCTION validar_sala_activa_para_obra();

-- Evitar solapamiento de fechas en HISTORICOS_EMPLEADOS
CREATE OR REPLACE FUNCTION validar_solapamiento_hist_empleado()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_EMPLEADOS
        WHERE num_expediente = NEW.num_expediente
          AND id_museo = NEW.id_museo
          AND id_estructura_org = NEW.id_estructura_org
          AND (
              NEW.fecha_inicio BETWEEN fecha_inicio AND COALESCE(fecha_fin, NEW.fecha_inicio)
              OR
              COALESCE(NEW.fecha_fin, NEW.fecha_inicio) BETWEEN fecha_inicio AND COALESCE(fecha_fin, COALESCE(NEW.fecha_fin, NEW.fecha_inicio))
          )
    ) THEN
        RAISE EXCEPTION 'Asignación solapada para el mismo empleado en la misma estructura organizacional.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_solapamiento_hist_empleado
BEFORE INSERT OR UPDATE ON HISTORICOS_EMPLEADOS
FOR EACH ROW
EXECUTE FUNCTION validar_solapamiento_hist_empleado();

--Evitar duplicados de turno para empleado en mantenimiento mensual
CREATE OR REPLACE FUNCTION validar_turno_mantenimiento()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM MESES_ASIGNACIONES_EMPLEADOS
        WHERE id_museo = NEW.id_museo
          AND id_estructura_fis = NEW.id_estructura_fis
          AND id_mant_vig = NEW.id_mant_vig
          AND id_mes_anio = NEW.id_mes_anio
          AND turno = NEW.turno
    ) THEN
        RAISE EXCEPTION 'Asignación duplicada: el empleado ya tiene asignado ese turno en esa estructura y mes.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_turno_mantenimiento
BEFORE INSERT OR UPDATE ON MESES_ASIGNACIONES_EMPLEADOS
FOR EACH ROW
EXECUTE FUNCTION validar_turno_mantenimiento();


--Validar que no haya solapamiento de fechas de cierre de una misma sala
CREATE OR REPLACE FUNCTION validar_solapamiento_cierre_sala()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_CIERRES
        WHERE id_museo = NEW.id_museo
          AND id_estructura_fis = NEW.id_estructura_fis
          AND id_sala = NEW.id_sala
          AND (
              NEW.fecha_inicio BETWEEN fecha_inicio AND COALESCE(fecha_fin, NEW.fecha_inicio)
              OR
              COALESCE(NEW.fecha_fin, NEW.fecha_inicio) BETWEEN fecha_inicio AND COALESCE(fecha_fin, COALESCE(NEW.fecha_fin, NEW.fecha_inicio))
          )
    ) THEN
        RAISE EXCEPTION 'Existe un cierre solapado para esta sala en las fechas indicadas.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_solapamiento_cierre_sala
BEFORE INSERT OR UPDATE ON HISTORICOS_CIERRES
FOR EACH ROW
EXECUTE FUNCTION validar_solapamiento_cierre_sala();

--Validar que una obra no se registre más de una vez en el mismo museo y categoría
CREATE OR REPLACE FUNCTION validar_movimiento_activo_unico()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_MOVIMIENTOS
        WHERE id_obra = NEW.id_obra
          AND id_museo = NEW.id_museo
          AND fecha_fin IS NULL
    ) THEN
        RAISE EXCEPTION 'Ya existe un movimiento activo de esta obra en este museo.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_movimiento_unico_activo
BEFORE INSERT ON HISTORICOS_MOVIMIENTOS
FOR EACH ROW
WHEN (NEW.fecha_fin IS NULL)
EXECUTE FUNCTION validar_movimiento_activo_unico();

--Evitar superposición de eventos en la misma sala y museo
CREATE OR REPLACE FUNCTION validar_evento_no_superpuesto()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM EVENTOS
        WHERE id_museo = NEW.id_museo
          AND id_estructura_fis = NEW.id_estructura_fis
          AND id_sala = NEW.id_sala
          AND (
              NEW.fecha_inicio BETWEEN fecha_inicio AND fecha_fin
              OR
              NEW.fecha_fin BETWEEN fecha_inicio AND fecha_fin
              OR
              fecha_inicio BETWEEN NEW.fecha_inicio AND NEW.fecha_fin
          )
    ) THEN
        RAISE EXCEPTION 'Ya hay un evento programado en esa sala y fecha.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_evento_superpuesto
BEFORE INSERT OR UPDATE ON EVENTOS
FOR EACH ROW
WHEN (NEW.id_estructura_fis IS NOT NULL AND NEW.id_sala IS NOT NULL)
EXECUTE FUNCTION validar_evento_no_superpuesto();


--Validar que una actividad de mantenimiento registrada tenga fechas válidas y esté asignada
CREATE OR REPLACE FUNCTION validar_registro_mantenimiento()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.fecha_fin IS NOT NULL AND NEW.fecha_fin < NEW.fecha_inicio THEN
        RAISE EXCEPTION 'La fecha de fin no puede ser menor que la de inicio en un mantenimiento realizado.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_registro_mantenimiento
BEFORE INSERT OR UPDATE ON REGISTROS_ACT_REALIZADAS
FOR EACH ROW
EXECUTE FUNCTION validar_registro_mantenimiento();

--Validar que la sala asignada a una colección realmente exista y esté operativa
CREATE OR REPLACE FUNCTION validar_asignacion_coleccion_sala()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HISTORICOS_CIERRES
        WHERE id_museo = NEW.id_museo
          AND id_estructura_fis = NEW.id_estructura_fis
          AND id_sala = NEW.id_sala
          AND CURRENT_DATE BETWEEN fecha_inicio AND COALESCE(fecha_fin, CURRENT_DATE)
    ) THEN
        RAISE EXCEPTION 'La sala asignada a la colección está cerrada actualmente.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_sala_coleccion
BEFORE INSERT OR UPDATE ON COLECCIONES_SALAS
FOR EACH ROW
EXECUTE FUNCTION validar_asignacion_coleccion_sala();


--Validar que la fecha de inicio laboral no sea antes de la fecha de nacimiento del empleado
CREATE OR REPLACE FUNCTION validar_fecha_inicio_empleado()
RETURNS TRIGGER AS $$
DECLARE
    fecha_nac DATE;
BEGIN
    SELECT EMPLEADOS_PROFESIONALES.fecha_nac INTO fecha_nac
    FROM EMPLEADOS_PROFESIONALES
    WHERE EMPLEADOS_PROFESIONALES.num_expediente = NEW.num_expediente;

    IF fecha_nac IS NOT NULL AND NEW.fecha_inicio < fecha_nac THEN
        RAISE EXCEPTION 'La fecha de inicio del cargo no puede ser anterior a la fecha de nacimiento del empleado.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_validar_inicio_empleado
BEFORE INSERT OR UPDATE ON HISTORICOS_EMPLEADOS
FOR EACH ROW
EXECUTE FUNCTION validar_fecha_inicio_empleado();

--Evitar solapamiento de horarios en el mismo día y museo
CREATE OR REPLACE FUNCTION validar_solapamiento_horarios()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM HORARIOS
        WHERE id_museo = NEW.id_museo
          AND dia = NEW.dia
          AND (
              NEW.hora_inicio BETWEEN hora_inicio AND hora_fin
              OR
              NEW.hora_fin BETWEEN hora_inicio AND hora_fin
              OR
              hora_inicio BETWEEN NEW.hora_inicio AND NEW.hora_fin
          )
    ) THEN
        RAISE EXCEPTION 'El horario se solapa con otro ya registrado para este día.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_solapamiento_horarios
BEFORE INSERT OR UPDATE ON HORARIOS
FOR EACH ROW
EXECUTE FUNCTION validar_solapamiento_horarios();


--Validar la jerarquia de lugar geografico 
CREATE OR REPLACE FUNCTION trg_check_lugar_jerarquia()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
BEGIN
  CASE NEW.tipo
    WHEN 'P' THEN
      -- País: no debe tener padre
      IF NEW.id_lugar_padre IS NOT NULL THEN
        RAISE EXCEPTION 'Un país (tipo=P) no puede tener id_lugar_padre';
      END IF;

    WHEN 'R' THEN
      -- Región: debe tener padre tipo P
      IF NEW.id_lugar_padre IS NULL THEN
        RAISE EXCEPTION 'Una región (tipo=R) debe tener un id_lugar_padre';
      ELSIF NOT EXISTS (
        SELECT 1
          FROM LUGARES_GEOGRAFICOS lg
         WHERE lg.id_lugar = NEW.id_lugar_padre
           AND lg.tipo     = 'P'
      ) THEN
        RAISE EXCEPTION 'El lugar padre % no es un país (tipo=P)', NEW.id_lugar_padre;
      END IF;

    WHEN 'C' THEN
      -- Ciudad: debe tener padre tipo R
      IF NEW.id_lugar_padre IS NULL THEN
        RAISE EXCEPTION 'Una ciudad (tipo=C) debe tener un id_lugar_padre';
      ELSIF NOT EXISTS (
        SELECT 1
          FROM LUGARES_GEOGRAFICOS lg
         WHERE lg.id_lugar = NEW.id_lugar_padre
           AND lg.tipo     = 'R'
      ) THEN
        RAISE EXCEPTION 'El lugar padre % no es una región (tipo=R)', NEW.id_lugar_padre;
      END IF;

    ELSE
      RAISE EXCEPTION 'Tipo de lugar desconocido: %', NEW.tipo;
  END CASE;

  RETURN NEW;
END;
$$;

CREATE TRIGGER trg_lugar_jerarquia
  BEFORE INSERT OR UPDATE ON LUGARES_GEOGRAFICOS
  FOR EACH ROW
  EXECUTE FUNCTION trg_check_lugar_jerarquia();


--Validar que la jerarquia de estructura física sea correcta
CREATE OR REPLACE FUNCTION trg_check_estructura_fisica_jerarquia()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
BEGIN
    CASE NEW.tipo
        WHEN 'E' THEN
        -- Edificio: no debe tener padre
        IF NEW.id_padre IS NOT NULL THEN
            RAISE EXCEPTION 'Un edificio (tipo=E) no puede tener id_padre';
        END IF;

    WHEN 'P' THEN
        -- Piso: debe tener padre tipo E
        IF NEW.id_padre IS NULL THEN
            RAISE EXCEPTION 'Un piso (tipo=P) debe tener un id_padre';
        ELSIF NOT EXISTS (
            SELECT 1
            FROM ESTRUCTURAS_FISICAS ef
            WHERE ef.id_estructura_fis = NEW.id_padre
              AND ef.tipo = 'E'
        ) THEN
            RAISE EXCEPTION 'El padre % de un piso no es un edificio (tipo=E)', NEW.id_padre;
        END IF;
    ELSE
        RAISE EXCEPTION 'Tipo de estructura física desconocido: %', NEW.tipo;
END CASE;

RETURN NEW;
END;
$$;



-------------------------------------------------------------------------------------------------------------------
--  ===========================================================================================================  --
--  ========================================= Inserts de Tablas ===============================================  --
--  ===========================================================================================================  --
-------------------------------------------------------------------------------------------------------------------

                                                       --1--                                
-----------------------------------------------| LUGARES_GEOGRAFICOS |---------------------------------------------- 
-- PAISES
INSERT INTO LUGARES_GEOGRAFICOS(nombre, tipo, id_lugar_padre) VALUES
(UPPER('España'), 'P', NULL),              -- ID 1
(UPPER('Italia'), 'P', NULL),              -- ID 2
(UPPER('Países Bajos'), 'P', NULL),        -- ID 3
(UPPER('Portugal'), 'P', NULL);            -- ID 4

-- REGIONES
INSERT INTO LUGARES_GEOGRAFICOS(nombre, tipo, id_lugar_padre) VALUES
(UPPER('Comunidad de Madrid'), 'R', 1),         -- ID 5
(UPPER('Lacio'), 'R', 2),                       -- ID 6
(UPPER('Lombardía'), 'R', 2),                   -- ID 7
(UPPER('Holanda Septentrional'), 'R', 3),       -- ID 8
(UPPER('Holanda Meridional'), 'R', 3),          -- ID 9
(UPPER('Lisboa'), 'R', 4),                      -- ID 10
(UPPER('Oporto'), 'R', 4);                      -- ID 11

-- CIUDADES
INSERT INTO LUGARES_GEOGRAFICOS(nombre, tipo, id_lugar_padre) VALUES
(UPPER('Madrid'), 'C', 5),                      -- ID 12
(UPPER('Roma'), 'C', 6),                        -- ID 13
(UPPER('Milán'), 'C', 7),                       -- ID 14
(UPPER('Ámsterdam'), 'C', 8),                   -- ID 15
(UPPER('La Haya'), 'C', 9),                     -- ID 16
(UPPER('Lisboa'), 'C', 10),                     -- ID 17
(UPPER('Oporto'), 'C', 11);                     -- ID 18




                                                       --2--                              
-----------------------------------------------------| MUSEOS |--------------------------------------------------------------- 
INSERT INTO MUSEOS (nombre, mision_proposito, fecha_fundacion, id_lugar) VALUES
-- MUSEO 1
(UPPER('Museo Nacional Centro de Arte Reina Sofía'),
 UPPER('Conservar, investigar y difundir el arte moderno y contemporáneo. Facilitar el acceso democrático a la cultura. Ser un espacio para el pensamiento crítico, el debate y la creación contemporánea en sus múltiples lenguajes: pintura, escultura, videoarte, performance, fotografía, instalación y más. Actuar como un centro de referencia internacional en arte contemporáneo y como archivo de la memoria reciente española.'),
 DATE '1992-09-10', 12),

-- MUSEO 2
(UPPER('Museo Nacional Thyssen-Bornemisza'),
 UPPER('El Museo Nacional Thyssen-Bornemisza tiene como misión conservar, estudiar y difundir una de las colecciones de arte más importantes del mundo, abarcando desde el siglo XIII hasta el XX. Su objetivo es ofrecer al público una visión global de la historia del arte occidental, complementando las colecciones del Museo del Prado y del Museo Reina Sofía, y promoviendo el acceso a la cultura y la educación artística.'),
 DATE '1992-10-08', 12),

-- MUSEO 3
(UPPER('La Galleria Nazionale'),
 UPPER('La Galleria Nazionale tiene como misión conservar, estudiar y promover el arte moderno y contemporáneo, tanto italiano como internacional, desde el siglo XIX hasta la actualidad. Busca ser un centro dinámico que fomente el diálogo entre las obras y el público, ofreciendo una visión crítica y plural del arte.'),
 DATE '1885-03-05', 13),

-- MUSEO 4
(UPPER('Pinacoteca di Brera'),
 UPPER('La Pinacoteca di Brera tiene como misión conservar, estudiar y difundir una de las colecciones de arte más importantes de Italia, abarcando obras desde el siglo XIII hasta el XX. El museo busca ofrecer al público una visión integral de la historia del arte italiano, promoviendo la educación artística y el acceso a la cultura.'),
 DATE '1809-08-15', 14),

-- MUSEO 5
(UPPER('Rijksmuseum'),
 UPPER('El Rijksmuseum es el museo nacional de los Países Bajos, dedicado a contar la historia de 800 años de arte e historia neerlandesa, desde el año 1200 hasta la actualidad. Además, organiza varias exposiciones al año con obras de su propia colección y préstamos nacionales e internacionales.'),
 DATE '1885-07-13', 15),

-- MUSEO 6
(UPPER('Kunstmuseum Den Haag'),
 UPPER('El Kunstmuseum Den Haag tiene como misión conservar, estudiar y difundir una de las colecciones de arte más importantes de Europa, abarcando desde el siglo XIX hasta la actualidad. El museo busca ofrecer al público una visión integral de la historia del arte moderno y contemporáneo, promoviendo la educación artística y el acceso a la cultura.'),
 DATE '1866-05-29', 16),

-- MUSEO 7
(UPPER('Museu Nacional de Arte Antiga'),
 UPPER('El Museu Nacional de Arte Antiga tiene como misión conservar, estudiar y difundir la más importante colección pública de arte antiguo de Portugal, abarcando obras desde la Edad Media hasta el siglo XIX. El museo busca ofrecer al público una visión integral del patrimonio artístico nacional e internacional, promoviendo la educación artística y el acceso a la cultura.'),
 DATE '1884-05-11', 17),

-- MUSEO 8
(UPPER('Museu Nacional Soares dos Reis'),
 UPPER('El Museu Nacional Soares dos Reis tiene como misión conservar, estudiar y difundir una de las colecciones de arte más importantes de Portugal, abarcando obras desde el siglo XVI hasta el XX. El museo busca ofrecer al público una visión integral del patrimonio artístico nacional, promoviendo la educación artística y el acceso a la cultura.'),
 DATE '1833-04-11', 18);




                                                        --3--                                
-----------------------------------------------------| HORARIOS |------------------------------------------------------------- 
-- MUSEO 1
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(1,1,'10:00','21:00'),
(1,3,'10:00','21:00'),
(1,4,'10:00','21:00'),
(1,5,'10:00','21:00'),
(1,6,'10:00','21:00'),
(1,7,'10:00','14:30');

-- MUSEO 2
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(2,1,'12:00','16:00'),
(2,2,'10:00','19:00'),
(2,3,'10:00','19:00'),
(2,4,'10:00','19:00'),
(2,5,'10:00','19:00'),
(2,6,'10:00','23:00'),
(2,7,'10:00','19:00');

-- MUSEO 3
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(3,2,'09:00','19:00'),
(3,3,'09:00','19:00'),
(3,4,'09:00','19:00'),
(3,5,'09:00','19:00'),
(3,6,'09:00','19:00'),
(3,7,'09:00','19:00');

-- MUSEO 4
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(4,2,'08:00','19:15'),
(4,3,'08:00','19:15'),
(4,4,'08:00','19:15'),
(4,5,'08:00','19:15'),
(4,6,'08:00','19:15'),
(4,7,'08:00','19:15');

-- MUSEO 5
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(5,1,'09:00','17:00'),
(5,2,'09:00','17:00'),
(5,3,'09:00','17:00'),
(5,4,'09:00','17:00'),
(5,5,'09:00','17:00'),
(5,6,'09:00','17:00'),
(5,7,'09:00','17:00');

-- MUSEO 6
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(6,2,'10:00','17:00'),
(6,3,'10:00','17:00'),
(6,4,'10:00','17:00'),
(6,5,'10:00','17:00'),
(6,6,'10:00','17:00'),
(6,7,'10:00','17:00');

-- MUSEO 7
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(7,2,'10:00','18:00'),
(7,3,'10:00','18:00'),
(7,4,'10:00','18:00'),
(7,5,'10:00','18:00'),
(7,6,'10:00','18:00'),
(7,7,'10:00','18:00');

-- MUSEO 8
INSERT INTO HORARIOS(id_museo, dia, hora_inicio, hora_fin) VALUES
(8,2,'10:00','18:00'),
(8,3,'10:00','18:00'),
(8,4,'10:00','18:00'),
(8,5,'10:00','18:00'),
(8,6,'10:00','18:00'),
(8,7,'10:00','18:00');


                                                        --4--                                
---------------------------------------------------| TIPOS_TICKETS |------------------------------------------------------------------------


INSERT INTO TIPOS_TICKETS (id_museo, fecha_inicio, fecha_fin, precio, tipo) VALUES
(1, '2024-01-10', NULL, 18, 'G'),
(2, '2024-02-15', NULL, 14, 'G'),
(2, '2024-03-20', NULL, 10, 'R'),
(3, '2024-04-05', NULL, 15, 'G'),
(3, '2024-05-12', NULL, 2, 'R'),
(4, '2024-06-18', NULL, 15, 'G'),
(4, '2024-07-22', NULL, 10, 'R'),
(5, '2024-08-30', NULL, 25, 'G'),
(5, '2024-09-14', NULL, 12.5, 'R'),
(6, '2024-10-03', NULL, 20, 'G'),
(6, '2024-11-20', NULL, 9, 'R'),
(7, '2024-12-01', NULL, 6, 'G'),
(7, '2024-12-15', NULL, 3, 'R'),
(8, '2024-07-10', NULL, 10, 'G'),
(8, '2024-08-25', NULL, 5, 'R');


                                                        --5--                                
-----------------------------------------------------| ENTRADAS |------------------------------------------------------------- 

INSERT INTO ENTRADAS(id_museo, fecha_hora_emision, monto, tipo) VALUES
-- Museo 1: lunes (1), 10:30
(1, '2025-01-13 10:30:00', 18, 'G'),

-- Museo 2: miércoles (3), 15:00
(2, '2025-02-19 15:00:00', 14, 'G'),
(2, '2025-03-05 11:00:00', 10, 'R'),

-- Museo 3: viernes (5), 18:00
(3, '2025-04-11 18:00:00', 15, 'G'),
(3, '2025-05-02 10:00:00', 2, 'R'),

-- Museo 4: sábado (6), 09:00
(4, '2025-01-25 09:00:00', 15, 'G'),
(4, '2025-02-15 17:00:00', 10, 'R'),

-- Museo 5: martes (2), 16:30
(5, '2025-03-18 16:30:00', 25, 'G'),
(5, '2025-04-08 11:00:00', 12.5, 'R'),

-- Museo 6: jueves (4), 11:00
(6, '2025-05-15 11:00:00', 20, 'G'),
(6, '2025-02-13 16:00:00', 9, 'R'),

-- Museo 7: domingo (7), 12:00
(7, '2025-03-30 12:00:00', 6, 'G'),
(7, '2025-05-04 17:30:00', 3, 'R'),

-- Museo 8: viernes (5), 15:00
(8, '2025-01-31 15:00:00', 10, 'G'),
(8, '2025-04-18 11:30:00', 5, 'R');



                                                        --6--                                
-----------------------------------------------| ESTRUCTURAS_FISICAS |--------------------------------------------------------
-- MUSEO 1: Reina Sofía
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(1, 'EDIFICIO SABATINI', 'E', 'COLECCIÓN PERMANENTE Y ADMINISTRACIÓN', 'CALLE SANTA ISABEL, 52, 28012 MADRID');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 1', 'P', 1, 1);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(1, 'EDIFICIO NOUVEL', 'E', 'AUDITORIO, BIBLIOTECA Y EXPOSICIONES TEMPORALES', 'RONDA DE ATOCHA, 2, 28012 MADRID');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 1', 'P', 1, 3);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(1, 'PALACIO DE VELÁZQUEZ', 'E', 'EXPOSICIONES DE GRAN FORMATO', 'PARQUE DEL RETIRO, MADRID');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 1', 'P', 1, 5);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(1, 'PALACIO DE CRISTAL', 'E', 'INSTALACIONES ARTÍSTICAS CONTEMPORÁNEAS', 'PARQUE DEL RETIRO, MADRID');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 1', 'P', 1, 7);

--MUSEO 2: Thyssen
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(2, 'PALACIO DE VILLAHERMOSA', 'E', 'COLECCIÓN PERMANENTE', 'PASEO DEL PRADO, 8, 28014 MADRID');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(2, 'PISO 1', 'P', 2, 9);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(2, 'AMPLIACIÓN CARMEN THYSSEN', 'E', 'EXPOSICIONES TEMPORALES', 'EDIFICIOS COLINDANTES');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(2, 'PISO 1', 'P', 2, 11);

-- MUSEO 3: La Galleria Nazionale
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(3, 'PALACIO DE BELLAS ARTES', 'E', 'SEDE PRINCIPAL Y EXPOSICIONES TEMPORALES', 'VIALE DELLE BELLE ARTI, 131, 00197 ROMA');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(3, 'PLANTA BAJA', 'P', 3, 13);

-- MUSEO 4: Pinacoteca di Brera
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(4, 'PALAZZO BRERA', 'E', 'SEDE PRINCIPAL Y COLECCIÓN PERMANENTE', 'VIA BRERA, 28, 20121 MILÁN');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(4, 'PISO 1', 'P', 4, 15);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(4, 'PALAZZO CITTERIO', 'E', 'ARTE MODERNO Y CONTEMPORÁNEO', 'VIA BRERA, 12, 20121 MILÁN');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(4, 'PISO 1', 'P', 4, 17);

-- MUSEO 5: Rijksmuseum
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(5, 'EDIFICIO PRINCIPAL', 'E', 'COLECCIÓN PERMANENTE', 'MUSEUMSTRAAT 1, 1071 XX ÁMSTERDAM');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(5, 'PISO 1', 'P', 5, 19);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(5, 'PABELLÓN ASIÁTICO', 'E', 'COLECCIÓN DE ARTE ASIÁTICO', 'JARDÍN SUR DEL RIJKSMUSEUM');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(5, 'PISO 1', 'P', 5, 21);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(5, 'ALA PHILIPS', 'E', 'EXPOSICIONES TEMPORALES', 'RIJKSMUSEUM');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(5, 'PISO 1', 'P', 5, 23);

-- MUSEO 6: Kunstmuseum Den Haag
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(6, 'KUNSTMUSEUM DEN HAAG', 'E', 'COLECCIÓN PERMANENTE', 'STADHOUDERSLAAN 41, LA HAYA');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(6, 'PISO 1', 'P', 6, 25);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(6, 'KM21', 'E', 'ARTE CONTEMPORÁNEO', 'STADHOUDERSLAAN 43, LA HAYA');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(6, 'PISO 1', 'P', 6, 27);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(6, 'FOTOMUSEUM DEN HAAG', 'E', 'MUSEO DE FOTOGRAFÍA', 'STADHOUDERSLAAN 43, LA HAYA');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(6, 'PISO 1', 'P', 6, 29);

-- MUSEO 7: Museu Nacional de Arte Antiga
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(7, 'PALÁCIO DE ALVOR-POMBAL', 'E', 'COLECCIÓN PRINCIPAL', 'RUA DAS JANELAS VERDES, LISBOA');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(7, 'PISO 1', 'P', 7, 31);

INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(7, 'ANEXO CONVENTO DE SANTO ALBERTO', 'E', 'EXPOSICIONES ADICIONALES', 'CONECTADO AL PRINCIPAL');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(7, 'PISO 1', 'P', 7, 33);

-- MUSEO 8: Museu Nacional Soares dos Reis
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, descripcion, direccion) VALUES 
(8, 'PALÁCIO DOS CARRANCAS', 'E', 'COLECCIÓN PRINCIPAL', 'RUA DE DOM MANUEL II, 44, OPORTO');
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(8, 'PLANTA BAJA', 'P', 8, 35);

-- OTROS PISOS--
-- Museo 1: Reina Sofía
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 2', 'P', 1, 1);
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(1, 'PISO 4', 'P', 1, 1);
--Museo 2: Thyssen
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(2, 'PISO 2', 'P', 2, 9);
-- Museo 3: La Galleria Nazionale
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(3, 'PISO 1', 'P', 3, 13);
-- Museo 4: Pinacoteca di Brera
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre)VALUES 
(4, 'PISO 2', 'P', 4, 15);
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(4, 'PISO 2', 'P', 4, 17);
-- Museo 6: Kunstmuseum Den Haag
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(6, 'PISO 2', 'P', 6, 25);
--Museo 8: Museu Nacional Soares dos Reis 
INSERT INTO ESTRUCTURAS_FISICAS (id_museo, nombre, tipo, id_museo_padre, id_padre) VALUES 
(8, 'PISO 1', 'P', 8, 35);




                                                        --7--                                
----------------------------------------------------| SALAS_EXP |-------------------------------------------------------------
INSERT INTO SALAS_EXP (id_museo, id_estructura_fis, nombre) VALUES
-- Museo 1: Reina Sofía
(1, 37, 'SALA 206'),
(1, 37, 'SALA 201'),
(1, 37, 'SALA 205'),
(1, 38, 'SALA 401'),
(1, 38, 'SALA 402'),

-- Museo 2: Thyssen
(2, 10, 'SALA 12'),
(2, 10, 'SALA 13'),
(2, 39, 'SALA 29'),
(2, 39, 'SALA 30'),
(2, 39, 'SALA 33'),
(2, 39, 'SALA 31'),

-- Museo 3: Galleria Nazionale
(3, 14, 'SALA 2'),
(3, 14, 'SALA 4'),
(3, 40, 'SALA 8'),
(3, 40, 'SALA 10'),
(3, 40, 'SALA 14'),

-- Museo 4: Pinacoteca di Brera
(4, 16, 'SALA 15'),
(4, 16, 'SALA 20'),
(4, 16, 'SALA 7'),
(4, 41, 'SALA 37'),
(4, 41, 'SALA 29'),
(4, 41, 'SALA 30'),

-- Museo 6: Kunstmuseum
(6, 26, 'SALA ARTE SIMBÓLICO'),
(6, 26, 'SALA REALISMO'),
(6, 43, 'SALA IMPRESIONISTAS'),

-- Museo 7: MNAA
(7, 32, 'SALA 1'),
(7, 32, 'SALA 5'),
(7, 32, 'SALA 10'),
(7, 32, 'SALA 11'),

-- Museo 8: Soares dos Reis
(8, 36, 'SALA 3'),
(8, 36, 'SALA 4'),
(8, 36, 'SALA 5'),
(8, 36, 'SALA DE ESCULTURA'),
(8, 44, 'SALA DE ESCULTURA MODERNA');



                                                        --8--                                
------------------------------------------------| HISTORICOS_CIERRES |-------------------------------------------------------------

INSERT INTO HISTORICOS_CIERRES (id_museo, id_estructura_fis, id_sala, fecha_inicio, fecha_fin) VALUES
(1, 37, 1, '2024-02-01', '2024-02-10'),   -- Reina Sofía, SALA 206
(1, 38, 4, '2024-03-15', '2024-03-20'),   -- Reina Sofía, SALA 401
(2, 39, 8, '2024-04-05', '2024-04-12'),   -- Thyssen, SALA 29
(2, 10, 6, '2024-05-01', '2024-05-03'),   -- Thyssen, SALA 12
(3, 40, 14, '2024-06-10', '2024-06-18'),  -- Galleria Nazionale, SALA 8
(4, 41, 20, '2024-07-22', '2024-07-25'),  -- Pinacoteca di Brera, SALA 37
(6, 26, 23, '2024-08-10', '2024-08-15'),  -- Kunstmuseum, SALA ARTE SIMBÓLICO
(7, 32, 26, '2024-09-05', '2024-09-10'),  -- MNAA, SALA 1
(8, 36, 30, '2024-10-01', '2024-10-07');  -- Soares dos Reis, SALA 3


                                                        --9--                                
------------------------------------------------| EMPLEADOS_MANT_VIG |-------------------------------------------------------------
-- Empleado 1 (España - Vigilante)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Javier', 'Ruiz', 'ESP543210', 'V');

-- Empleado 2 (España - Mantenimiento)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Carmen', 'Díaz', 'ESP098765', 'M');

-- Empleado 3 (Italia - Vigilante)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Giulia', 'Ricci', 'ITL456789', 'V');

-- Empleado 4 (Italia - Mantenimiento)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Luca', 'Moretti', 'ITL987654', 'M');

-- Empleado 5 (Países Bajos - Vigilante)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Sanne', 'Mulder', 'NLD112233', 'V');

-- Empleado 6 (Países Bajos - Mantenimiento)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Dirk', 'De Vries', 'NLD445566', 'M');

-- Empleado 7 (Portugal - Vigilante)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Ana', 'Santos', 'PRT789012', 'V');

-- Empleado 8 (Portugal - Mantenimiento)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Diogo', 'Gomes', 'PRT345678', 'M');

-- Empleado 9 (España - Vigilante)
INSERT INTO EMPLEADOS_MANT_VIG (nombre, apellido, doc_identidad, tipo)
VALUES ('Laura', 'Blanco', 'ESP111222', 'V');




                                                        --10--                                
------------------------------------------| MESES_ASIGNACIONES_EMPLEADOS |-----------------------------------------------------------

INSERT INTO MESES_ASIGNACIONES_EMPLEADOS (id_museo, id_estructura_fis, id_mant_vig, id_mes_anio, turno) VALUES
(1, 37, 1, '2024-01-01', 'M'), -- Javier Ruiz, Reina Sofía, Piso 1, Mañana
(1, 38, 2, '2024-01-01', 'V'), -- Carmen Díaz, Reina Sofía, Edificio Nouvel, Vespertino
(2, 10, 3, '2024-02-01', 'N'), -- Giulia Ricci, Thyssen, Palacio Villahermosa, Noche
(2, 39, 4, '2024-02-01', 'M'), -- Luca Moretti, Thyssen, Ampliación Carmen Thyssen, Mañana
(3, 14, 5, '2024-03-01', 'V'), -- Sanne Mulder, Galleria Nazionale, Planta Baja, Vespertino
(4, 16, 6, '2024-03-01', 'N'), -- Dirk De Vries, Pinacoteca di Brera, Palazzo Brera, Noche
(6, 26, 7, '2024-04-01', 'M'), -- Ana Santos, Kunstmuseum, Kunstmuseum Den Haag, Mañana
(7, 32, 8, '2024-04-01', 'V'), -- Diogo Gomes, MNAA, Palácio de Alvor-Pombal, Vespertino
(8, 36, 9, '2024-05-01', 'N'); -- Laura Blanco, Soares dos Reis, Palácio dos Carrancas, Noche


                                                        --11--                                
-----------------------------------------------------| EVENTOS |----------------------------------------------------------------------


INSERT INTO EVENTOS (id_museo, titulo, fecha_inicio, fecha_fin, precio_persona, institucion_educativa, cantidad_persona, id_estructura_fis, id_sala)
VALUES
-- 1. Reina Sofía: Taller de arte contemporáneo
(1, 'TALLER DE ARTE CONTEMPORÁNEO', '2025-03-10', '2025-03-12', 15, 'IES JUAN DE MAIRENA', 30, 37, 1),

-- 2. Reina Sofía: Conferencia sobre Picasso
(1, 'CONFERENCIA PICASSO Y EL SIGLO XX', '2025-04-05', '2025-04-05', 10, NULL, 80, 38, 4),

-- 3. Thyssen: Visita guiada para universitarios
(2, 'VISITA GUIADA UNIVERSITARIA', '2025-02-20', '2025-02-20', 5, 'UNIVERSIDAD AUTÓNOMA DE MADRID', 40, 10, 6),

-- 4. Thyssen: Concierto de música clásica
(2, 'CONCIERTO DE MÚSICA CLÁSICA', '2025-05-15', '2025-05-15', 20, NULL, 120, 39, 8),

-- 5. Galleria Nazionale: Seminario de historia del arte
(3, 'SEMINARIO HISTORIA DEL ARTE ITALIANO', '2025-06-01', '2025-06-03', 12, 'UNIVERSITÀ DI ROMA', 25, 14, 12),

-- 6. Pinacoteca di Brera: Taller infantil de pintura
(4, 'TALLER INFANTIL DE PINTURA', '2025-07-10', '2025-07-11', 8, 'SCUOLA PRIMARIA MILANO', 20, 16, 17),

-- 7. Kunstmuseum: Exposición temporal de fotografía
(6, 'EXPOSICIÓN TEMPORAL DE FOTOGRAFÍA', '2025-08-05', '2025-08-30', 18, NULL, 200, 43, 25),

-- 8. MNAA: Jornada de puertas abiertas
(7, 'JORNADA DE PUERTAS ABIERTAS', '2025-09-21', '2025-09-21', 0, NULL, 300, 32, 26),

-- 9. Soares dos Reis: Conferencia sobre escultura portuguesa
(8, 'CONFERENCIA ESCULTURA PORTUGUESA', '2025-10-15', '2025-10-15', 7, 'UNIVERSIDADE DO PORTO', 50, 44, 34);


                                                        --12--                                
-----------------------------------------------| RESUMENES_HISTORICOS |---------------------------------------------------------------------- 


INSERT INTO RESUMENES_HISTORICOS (id_museo, anio, hechos) VALUES
(1, 1992, 'FUNDACIÓN DEL MUSEO NACIONAL CENTRO DE ARTE REINA SOFÍA.'),
(1, 2005, 'AMPLIACIÓN DEL MUSEO NACIONAL CENTRO DE ARTE REINA SOFÍA CON LA INAUGURACIÓN DEL EDIFICIO NOUVEL.'),
(2, 1992, 'FUNDACIÓN DEL MUSEO NACIONAL THYSSEN-BORNEMISZA.'),
(3, 1885, 'FUNDACIÓN DE LA GALLERIA NAZIONALE.'),
(4, 1809, 'FUNDACIÓN DE LA PINACOTECA DI BRERA.'),
(5, 1885, 'FUNDACIÓN DEL RIJKSMUSEUM.'),
(6, 1866, 'FUNDACIÓN DEL KUNSTMUSEUM DEN HAAG.'),
(7, 1884, 'FUNDACIÓN DEL MUSEU NACIONAL DE ARTE ANTIGA.'),
(8, 1833, 'FUNDACIÓN DEL MUSEU NACIONAL SOARES DOS REIS.');





                                                        --13--                                
-------------------------------------------------------| OBRAS |-----------------------------------------------------------------------------
--Museo 1: Reina Sofía
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('GUERNICA', '349.3 X 776.6', 'P', 'CUBISMO, EXPRESIONISMO', 'ÓLEO SOBRE LIENZO', 1, 37, 1, '1937-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LA MUJER EN AZUL', '32 X 65', 'P', 'PERIODO AZUL', 'ÓLEO SOBRE LIENZO', 2, 37, 1, '1901-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('EL ROSTRO DEL GRAN MASTURBADOR', '110 X 150', 'P', 'SURREALISMO', 'ÓLEO SOBRE LIENZO', 3, 37, 1, '1929-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('CABEZA DE MUJER LLORANDO', '60 X 49', 'P', 'CUBISMO EXPRESIONISTA', 'ÓLEO SOBRE LIENZO', 1, 37, 1, '1937-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('RETRATO DE RAMÓN GÓMEZ DE LA SERNA', '65 X 40 X 35', 'E', 'REALISMO', 'BRONCE FUNDIDO', 4, 38, 1, '1931-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('TORSO DE MUJER', '70 X 40 X 35', 'E', 'CUBISMO ESCULTÓRICO', 'HIERRO FORJADO', 5, 38, 1, '1925-01-01');

--Museo 2: Thyssen
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('SANTA CATALINA DE ALEJANDRÍA', '173 X 133', 'P', 'BARROCO', 'ÓLEO SOBRE LIENZO', 6, 10, 2, '1598-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('SAN JERÓNIMO PENITENTE', '108 X 89', 'P', 'MANIERISMO', 'ÓLEO SOBRE LIENZO', 7, 10, 2, '1600-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('EL TESTAMENTO DE ISABEL LA CATÓLICA', '390 X 541', 'P', 'REALISMO HISTÓRICO', 'ÓLEO SOBRE LIENZO', 8, 39, 2, '1864-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LA CASA JUNTO A LAS VÍAS DEL TREN', '61 X 73.7', 'P', 'REALISMO AMERICANO', 'ÓLEO SOBRE LIENZO', 9, 39, 2, '1925-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('BUSTO DE HOMBRE JOVEN', '55 X 40 X 30', 'E', 'ESCULTURA CLÁSICA MODERNA', 'BRONCE', 10, 39, 2, '1890-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('CABEZA DE MUJER', '50 X 30 X 30', 'E', 'VANGUARDIA ESPAÑOLA', 'HIERRO', 11, 39, 2, '1932-01-01');

--Museo 3: La Galleria Nazionale
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('AMOR SACRO Y AMOR PROFANO', '85 X 118', 'P', 'ROMANTICISMO', 'ÓLEO SOBRE LIENZO', 12, 14, 3, '1850-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('CLEOPATRA', '150 X 60 X 60', 'E', 'NEOCLASICISMO', 'MÁRMOL BLANCO', 13, 14, 3, '1870-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LAS DOS MADRES', '125 X 100', 'P', 'SIMBOLISMO / REALISMO', 'ÓLEO SOBRE LIENZO', 14, 40, 3, '1889-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('EL ESPEJO DE VENUS', '190 X 170', 'P', 'SIMBOLISMO ITALIANO', 'ÓLEO SOBRE LIENZO', 15, 40, 3, '1895-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('COMPOSIZIONE', '90 X 120', 'P', 'FUTURISMO', 'ÓLEO SOBRE LIENZO', 16, 40, 3, '1915-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('SCOMPOSIZIONE DINAMICA', '110 X 80', 'P', 'FUTURISMO', 'ÓLEO SOBRE LIENZO', 16, 40, 3, '1914-01-01');

--Museo 4: Pinacoteca di Brera
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LA CENA DE EMAÚS', '141 X 196', 'P', 'BARROCO', 'ÓLEO SOBRE LIENZO', 17, 16, 4, '1606-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LA DEPOSICIÓN DE LA CRUZ', '303  X 184', 'P', 'MANIERISMO', 'ÓLEO SOBRE LIENZO', 18, 16, 4, '1567-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('VIRGEN CON EL NIÑO Y SANTOS', '248 X 148', 'P', 'QUATTROCENTO', 'TÉMPERA SOBRE TABLA', 19, 16, 4, '1472-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('EL BESO ROBADO', '112 X 88', 'P', 'ROMANTICISMO', 'ÓLEO SOBRE LIENZO', 20, 41, 4, '1859-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('FIGURA FEMENINA RECLINADA', '100 X 160 X 80', 'E', 'IMPRESIONISMO ESCULTÓRICO', 'CERA Y YESO', 21, 41, 4, '1905-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('CABEZA DE MUJER JOVEN', '55 X 40 X 30', 'E', 'EXPRESIONISMO', 'MÁRMOL', 22, 41, 4, '1912-01-01');

--Museo 6: Kunstmuseum Den Haag
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('BODEGÓN CON FLOREROS', '65 X 50', 'P', 'SIMBOLISMO', 'ÓLEO SOBRE LIENZO', 23, 26, 6, '1912-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('MUJER CON SOMBRERO ROJO', '80 X 60', 'P', 'REALISMO NEERLANDÉS', 'ÓLEO SOBRE LIENZO', 24, 26, 6, '1895-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('EL PUERTO DE RÓTERDAM', '55 X 90', 'P', 'IMPRESIONISMO TEMPRANO', 'ÓLEO SOBRE LIENZO', 25, 43, 6, '1860-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('RETRATO DE MUJER SENTADA', '100 X 75', 'P', 'IMPRESIONISMO', 'ÓLEO SOBRE LIENZO', 25, 43, 6, '1901-01-01');

-- Museo 7: Museu Nacional de Arte Antiga
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('SAN VICENTE Y LA CORTE DE LISBOA', '200 X 100', 'P', 'GÓTICO TARDÍO / RENACIMIENTO', 'TÉMPERA SOBRE TABLA', 26, 32, 7, '1470-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('LA TENTACIÓN DE SAN ANTONIO', '131.5 X 220', 'P', 'GÓTICO FLAMENCO / FANTÁSTICO', 'ÓLEO SOBRE TABLA', 27, 32, 7, '1500-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('VIRGEN CON EL NIÑO', '130 X 70 X 50', 'E', 'GÓTICO', 'MADERA TALLADA Y POLICROMADA', 28, 32, 7, '1400-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('SAN JUAN EVANGELISTA', '150 X 50 X 40', 'E', 'RENACIMIENTO PORTUGUÉS', 'MADERA POLICROMADA', 29, 32, 7, '1500-01-01');

-- Museo 8: Museu Nacional Soares dos Reis
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('RETRATO DE FRANCISCO DE LACERDA', '120 X 90', 'P', 'REALISMO / RETRATO PSICOLÓGICO', 'ÓLEO SOBRE LIENZO', 30, 36, 8, '1900-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('PAISAGEM COM PINHEIROS', '75 X 110', 'P', 'NATURALISMO PORTUGUÉS', 'ÓLEO SOBRE LIENZO', 31, 36, 8, '1880-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('BARCOS NO DOURO', '80 X 60', 'P', 'REALISMO', 'ÓLEO SOBRE LIENZO', 32, 36, 8, '1901-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('BUSTO DE CAMILO CASTELO BRANCO', '60 X 45 X 35', 'E', 'REALISMO', 'BRONCE', 33, 36, 8, '1895-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('FIGURA SENTADA', '130 X 90 X 80', 'E', 'MODERNISMO PORTUGUÉS', 'BRONCE', 34, 44, 8, '1930-01-01');
INSERT INTO OBRAS (nombre, dimension, tipo, estilos, caract_mat_tec, id_sala, id_estructura_fis, id_museo, periodo)
VALUES ('RETRATO DE SENHORA COM LEQUE', '110 X 70 X 60', 'E', 'SIMBOLISMO', 'MÁRMOL', 33, 36, 8, '1910-01-01');



                                                        --14--                                
-----------------------------------------------------| ARTISTAS |-------------------------------------------------------------------------------
INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Pablo'), UPPER('Picasso'), UPPER('Picasso'), '1881-10-25', '1973-04-08', UPPER('Cubismo, Surrealismo, Simbolismo, Periodo Azul, Periodo Rosa, Periodo Africano. Conocido por pintura, escultura, grabado, ceramista, diseño escénico.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Salvador'), UPPER('Dalí'), UPPER('Dalí'), '1904-05-11', '1989-01-23', UPPER('Surrealismo, conocido por imágenes oníricas, muy imaginativo, influenciado por maestros del Renacimiento.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Victorio'), UPPER('Macho'), UPPER('Victorio Macho'), '1887-12-23', '1966-07-13', UPPER('Escultor contemporáneo español, influenciado por el Art Déco, conocido por retratos y obras públicas.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Pablo'), UPPER('Gargallo'), UPPER('Pablo Gargallo'), '1881-01-17', '1934-12-28', UPPER('Escultor y pintor español, pionero en el trabajo del metal y las formas abstractas, asociado al Cubismo, influenciado por el Modernismo catalán y el Art Nouveau.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Michelangelo Merisi'), UPPER('da Caravaggio'), UPPER('Caravaggio'), '1571-09-29', '1610-07-18', UPPER('Pintor barroco, conocido por su realismo intenso e inquietante, iluminación de claroscuro, observación naturalista de modelos, fuerte influencia en movimientos artísticos posteriores.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Doménikos'), UPPER('Theotokópoulos'), UPPER('El Greco'), '1541-01-01', '1614-04-07', UPPER('Pintura española, estilo dramático y expresionista altamente individual, figuras alargadas, temas religiosos, precursor del Expresionismo y el Cubismo.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Eduardo'), UPPER('Rosales Gallinas'), UPPER('Eduardo Rosales'), '1836-11-04', '1873-09-13', UPPER('Pintor español, escenas históricas, influenciado por el Purismo, Romanticismo, Orientalismo.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Edward'), UPPER('Hopper'), UPPER('Edward Hopper'), '1882-07-22', '1967-05-15', UPPER('Pintor realista americano, exploración de temas como la soledad, la alienación y las complejidades de la vida moderna, pinturas al óleo, grabado y acuarela.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('François-Auguste-René'), UPPER('Rodin'), UPPER('Auguste Rodin'), '1840-11-12', '1917-11-17', UPPER('Escultor francés, gran influencia en el arte moderno, realismo, simbolismo, impresionismo, trabajó con bronce, mármol, yeso y arcilla.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Julio'), UPPER('González'), UPPER('Julio González'), '1876-09-21', '1942-03-27', UPPER('Escultor español, pionero en la escultura de hierro soldado, Cubismo, Surrealismo, formas abstractas, trabajo del metal, dibujante.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Francesco'), UPPER('Hayez'), UPPER('Francesco Hayez'), '1791-02-10', '1882-12-12', UPPER('Romanticismo, conocido por grandes pinturas históricas, alegorías políticas y retratos. Figura crucial en la transición del Neoclasicismo al Romanticismo en el arte italiano.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Giovanni Maria'), UPPER('Benzoni'), UPPER('Giovanni Maria Benzoni'), '1809-08-28', '1873-04-28', UPPER('Escultor neoclásico, conocido por producir obras para viajeros del "Grand Tour", monumentos funerarios.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Giovanni'), UPPER('Segantini'), UPPER('Giovanni Segantini'), '1858-01-15', '1899-09-28', UPPER('Pintor italiano, paisajes alpinos, cuadros alegóricos, fusionó el contenido simbolista con el Neoimpresionismo (Divisionismo).'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Giulio Aristide'), UPPER('Sartorio'), UPPER('Giulio Aristide Sartorio'), '1860-02-11', '1932-10-03', UPPER('Pintor y director de cine italiano, simbolista, frescos, influenciado por los prerrafaelitas, pintura de paisaje.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Giacomo'), UPPER('Balla'), UPPER('Giacomo Balla'), '1871-07-24', '1958-03-01', UPPER('Artista italiano, miembro fundador del movimiento futurista, representó la luz, el movimiento y la velocidad. También escultor, fotógrafo.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Gino'), UPPER('Severini'), UPPER('Gino Severini'), '1883-04-07', '1966-02-27', UPPER('Pintor italiano, miembro destacado del movimiento futurista, sintetizó los estilos del Futurismo y el Cubismo, asociado al neoclasicismo, trabajó en mosaico y fresco.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Federico'), UPPER('Barocci'), UPPER('Federico Barocci'), '1528-01-01', '1612-09-30', UPPER('Pintor y grabador del Renacimiento italiano, muy estimado e influyente, prefigura el Barroco (Proto-Barroco), preparación meticulosa y ejecución dinámica, desarrolló un estilo único en el centro de Italia, Manierismo.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Piero di Benedetto'), UPPER('dei Franceschi'), UPPER('Piero della Francesca'), '1415-01-01', '1492-10-12', UPPER('Pintor italiano del Primer Renacimiento, pionero en la perspectiva, figuras humanas monumentales mediante el uso escultórico de la línea y la luz, uso original del color y la luz, también matemático.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Medardo'), UPPER('Rosso'), UPPER('Medardo Rosso'), '1858-06-20', '1928-03-31', UPPER('Escultor italiano, Impresionismo, Modernismo, estilo Post-Impresionista, favorecía la cera por su translucidez, exploró la luz y la forma, conciencia social.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Adolfo'), UPPER('Wildt'), UPPER('Adolfo Wildt'), '1868-03-01', '1931-03-12', UPPER('Escultor italiano, conocido por esculturas de mármol, mezcla simplicidad y sofisticación, modernista, influenciado por el Gótico, Barroco, movimiento Secesionista, Expresionismo, Simbolismo.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Johannes Theodorus'), UPPER('Toorop'), UPPER('Jan Toorop'), '1858-12-20', '1928-03-03', UPPER('Pintor neerlandés, trabajó en varios estilos incluyendo Simbolismo, Art Nouveau, Puntillismo, primeros trabajos influenciados por el Impresionismo de Ámsterdam, obras religiosas, ilustraciones de libros, carteles, vidrieras.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('George Hendrik'), UPPER('Breitner'), UPPER('George Hendrik Breitner'), '1857-09-12', '1923-06-05', UPPER('Pintor y fotógrafo neerlandés, figura importante del Impresionismo de Ámsterdam, conocido por escenas callejeras y puertos en un estilo realista, pintó al aire libre, utilizó la fotografía como referencia, realismo social.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Johan Barthold'), UPPER('Jongkind'), UPPER('Johan Barthold Jongkind'), '1819-06-03', '1891-02-09', UPPER('Pintor y grabador neerlandés, paisajes marinos, precursor del Impresionismo, se centró en la atmósfera, los efectos fugaces de la luz y los reflejos.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Isaac Lazarus'), UPPER('Israëls'), UPPER('Isaac Israëls'), '1865-02-03', '1934-10-07', UPPER('Pintor neerlandés, asociado al Impresionismo de Ámsterdam, pintura de la vida moderna, paisajes urbanos, vida callejera, damas elegantes, interiores de cafés y talleres de costura, paleta más colorida.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Nuno'), UPPER('Gonçalves'), UPPER('Nuno Gonçalves'), '1425-01-01', '1491-01-01', UPPER('Artista portugués, inició el Renacimiento portugués en la pintura, pintor de la corte, conocido por los Paneles de San Vicente, representó elementos de la sociedad portuguesa, pintura religiosa, retrato.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Jheronimus van'), UPPER('Aken'), UPPER('Hieronymus Bosch'), '1450-01-01', '1516-08-09', UPPER('Pintor neerlandés, pintor del norte de Europa de la Baja Edad Media, iconografía inusual, estilo complejo e individual, ilustraciones fantásticas de conceptos religiosos, representaciones macabras y pesadillescas del infierno, óleo sobre tabla de roble.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Maestre Portugués'), UPPER('Anónimo'), UPPER('Maestre Portugués Anónimo'), NULL, NULL, UPPER('Maestro de escultura religiosa, estilo Gótico.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Gil'), UPPER('Vicente'), UPPER('Gil Vicente'), '1465-01-01', '1536-01-01', UPPER('Dramaturgo y poeta portugués, actuó y dirigió sus propias obras, notable poeta lírico, temas religiosos, satírico, influenciado por el teatro popular e ibérico, humanismo de Erasmo y el Renacimiento italiano.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Columbano'), UPPER('Bordalo Pinheiro'), UPPER('Columbano'), '1857-11-21', '1929-11-06', UPPER('Pintor realista portugués, especializado en retratos, maestro del realismo en la pintura portuguesa, estilo independiente, paleta inusual.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('António Carvalho da'), UPPER('Silva'), UPPER('Silva Porto'), '1850-11-11', '1893-07-01', UPPER('Pintor naturalista portugués, enfoque en el paisaje, técnica de pincelada libre, parte del Grupo do Leão, figura humana reducida.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Maria Aurélia Martins de'), UPPER('Sousa'), UPPER('Aurélia de Sousa'), '1866-06-13', '1922-05-26', UPPER('Pintora portuguesa, estilo personal y naturalista, influencias del realismo, Impresionismo y Postimpresionismo, temas que incluyen retratos, paisajes y escenas de la vida cotidiana.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('António'), UPPER('Teixeira Lopes'), UPPER('Teixeira Lopes'), '1866-01-01', '1942-01-01', UPPER('Escultor portugués, naturalismo, temas dramáticos de maternidad, expresividad melancólica, influenciado por modelos escultóricos franceses.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('Rodolfo'), UPPER('Pinto do Couto'), UPPER('Rodolfo Pinto do Couto'), '1888-01-01', '1945-01-01', UPPER('Escultor portugués, activo en Portugal y Brasil, conocido por púlpitos de bronce, bustos y monumentos.'));

INSERT INTO ARTISTAS (nombre, apellido, nombre_artistico, fecha_nac, fecha_def, caract_est_tec)
VALUES (UPPER('José'), UPPER('Simões de Almeida (sobrinho)'), UPPER('Simões de Almeida (sobrinho)'), '1880-06-17', '1950-03-02', UPPER('Escultor naturalista portugués, conocido por bustos y monumentos, carácter oficial y conmemorativo, estudió en Lisboa, París y Roma.'));



                                                        --15--                                
--------------------------------------------------| OBRAS_ARTISTAS |-----------------------------------------------------------------------------
-- Museo 1: Reina Sofía
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (1, 1); -- Guernica - Pablo Picasso
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (2, 1); -- La mujer en azul - Pablo Picasso
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (3, 2); -- El rostro del gran masturbador - Salvador Dalí
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (4, 1); -- Cabeza de mujer llorando - Pablo Picasso
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (5, 3); -- Retrato de Ramón Gómez de la Serna - Victorio Macho
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (6, 4); -- Torso de mujer - Pablo Gargallo

-- Museo 2: Thyssen-Bornemisza
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (7, 5); -- Santa Catalina de Alejandría - Michelangelo Merisi da Caravaggio
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (8, 6); -- San Jerónimo penitente - Doménikos Theotokópoulos (El Greco)
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (9, 7); -- El testamento de Isabel la Católica - Eduardo Rosales Gallinas
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (10, 8); -- La casa junto a las vías del tren - Edward Hopper
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (11, 9); -- Busto de hombre joven - François-Auguste-René Rodin
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (12, 10); -- Cabeza de mujer - Julio González

-- La Galleria Nazionale
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (13, 11); -- Amor sacro y amor profano - Francesco Hayez
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (14, 12); -- Cleopatra - Giovanni Maria Benzoni
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (15, 13); -- Las dos madres - Giovanni Segantini
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (16, 14); -- El espejo de Venus - Giulio Aristide Sartorio
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (17, 15); -- Composizione - Giacomo Balla
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (18, 16); -- Scomposizione dinamica - Gino Severini

-- Pinacoteca di Brera
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (19, 11); -- El beso robado - Francesco Hayez
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (20, 5); -- La cena de Emaús - Michelangelo Merisi da Caravaggio
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (21, 17); -- La deposición de la cruz - Federico Barocci
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (22, 18); -- Virgen con el niño y santos - Piero di Benedetto dei Franceschi
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (23, 19); -- Figura femenina reclinada - Medardo Rosso
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (24, 20); -- Cabeza de mujer joven - Adolfo Wildt

-- Kunstmuseum Den Haag
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (25, 23); -- El puerto de Róterdam - Johan Barthold Jongkind
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (26, 21); -- Bodegón con floreros - Johannes Theodorus Toorop
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (27, 22); -- Mujer con sombrero rojo - George Hendrik Breitner
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (28, 24); -- Retrato de mujer sentada - Isaac Lazarus Israëls

-- Museu Nacional de Arte Antiga (MNAA)
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (29, 25); -- San Vicente y la Corte de Lisboa - Nuno Gonçalves
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (30, 26); -- La tentación de San Antonio - Jheronimus van Aken (Hieronymus Bosch)
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (31, 27); -- Virgen con el niño (Nossa Senhora da Piedade) - Maestre Portugués Anónimo
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (32, 28); -- San Juan Evangelista - Gil Vicente

-- Museu Nacional Soares dos Reis
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (33, 29); -- Retrato de Francisco de Lacerda - Columbano Bordalo Pinheiro
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (34, 30); -- Paisagem com Pinheiros - António Carvalho da Silva (Silva Porto)
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (35, 31); -- Barcos no Douro - Maria Aurélia Martins de Sousa (Aurélia de Sousa)
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (36, 32); -- Busto de Camilo Castelo Branco - António Teixeira Lopes
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (37, 33); -- Figura Sentada - Rodolfo Pinto do Couto
INSERT INTO OBRAS_ARTISTAS (id_obra, id_artista) VALUES (38, 34); -- Retrato de Senhora com Leque - José Simões de Almeida (sobrinho)




                                                        --16--                                
----------------------------------------------| EMPLEADOS_PROFESIONALES |-------------------------------------------------------------------------------
-- Empleado para Museo Nacional Centro de Arte Reina Sofía - ID 1
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('ESP123456'), UPPER('Elena'), NULL, UPPER('García'), UPPER('Ruiz'), '1985-03-15');

-- Empleado para Museo Nacional Thyssen-Bornemisza - ID 2
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('ESP987654'), UPPER('Carlos'), NULL, UPPER('López'), UPPER('Fernández'), '1980-11-22');

-- Empleado para La Galleria Nazionale - ID 3
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('IT0123456'), UPPER('Sofia'), NULL, UPPER('Rossi'), UPPER('Bianchi'), '1990-07-01');

-- Empleado para Pinacoteca di Brera - ID 4
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('IT7890123'), UPPER('Marco'), NULL, UPPER('Conti'), UPPER('Ferrari'), '1988-04-10');

-- Empleado para Museo Rijksmuseum - ID 5
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('NL1234567'), UPPER('Anna'), NULL, UPPER('Jansen'), UPPER('de Boer'), '1975-09-20');

-- Empleado para Museo Kunstmuseum Den Haag - ID 6
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('NL7654321'), UPPER('Pieter'), NULL, UPPER('Bakker'), UPPER('Visser'), '1982-01-05');

-- Empleado para Museu Nacional de Arte Antiga (MNAA) - ID 7
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('PT0011223'), UPPER('Beatriz'), NULL, UPPER('Silva'), UPPER('Costa'), '1989-06-18');

-- Empleados para Museu Nacional Soares dos Reis - ID 8
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('PT3344556'), UPPER('João'), NULL, UPPER('Ferreira'), UPPER('Mendes'), '1970-12-03');
INSERT INTO EMPLEADOS_PROFESIONALES (doc_identidad, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, fecha_nac)
VALUES (UPPER('PT6789012'), UPPER('Miguel'), UPPER('Sousa'), UPPER('Martins'), UPPER('Pereira'), '1995-02-28');

 


                                                        --17--                                
-----------------------------------------------------| IDIOMAS |---------------------------------------------------------------------------------------
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Español')); -- id_idioma = 1
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Inglés'));   -- id_idioma = 2
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Italiano')); -- id_idioma = 3
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Portugués')); -- id_idioma = 4
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Neerlandés')); -- id_idioma = 5
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Francés'));  -- id_idioma = 6
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Alemán'));   -- id_idioma = 7
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Chino Mandarín')); -- id_idioma = 8
INSERT INTO IDIOMAS (lengua) VALUES (UPPER('Japonés'));  -- id_idioma = 9




                                                        --18--                                
-------------------------------------------------| IDIOMAS_EMPLEADOS |----------------------------------------------------------------------------------
-- Elena García (num_expediente = 1)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (1, 1); -- Español
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (1, 2); -- Inglés

-- Carlos López (num_expediente = 2)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (2, 1); -- Español
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (2, 6); -- Francés

-- Sofia Rossi (num_expediente = 3)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (3, 3); -- Italiano
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (3, 2); -- Inglés
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (3, 7); -- Alemán

-- Marco Conti (num_expediente = 4)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (4, 3); -- Italiano
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (4, 1); -- Español

-- Anna Jansen (num_expediente = 5)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (5, 5); -- Neerlandés
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (5, 2); -- Inglés
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (5, 7); -- Alemán

-- Pieter Bakker (num_expediente = 6)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (6, 5); -- Neerlandés
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (6, 2); -- Inglés

-- Beatriz Silva (num_expediente = 7)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (7, 4); -- Portugués
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (7, 2); -- Inglés

-- João Ferreira (num_expediente = 8)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (8, 4); -- Portugués
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (8, 1); -- Español

-- Miguel Martins (num_expediente = 9)
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (9, 4); -- Portugués
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (9, 2); -- Inglés
INSERT INTO IDIOMAS_EMPLEADOS (num_expediente, id_idioma) VALUES (9, 8); -- Chino Mandarín




                                                        --19--                                
---------------------------------------------| FORMACIONES_PROFESIONALES |----------------------------------------------------------------------------------
-- Empleado 1: Elena García (España)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (1, UPPER('Máster en Curaduría de Arte y Museografía'), 2010, UPPER('Especialización en investigación, selección y exhibición de colecciones de arte.'));

-- Empleado 2: Carlos López (España)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (2, UPPER('Grado en Conservación y Restauración de Bienes Culturales'), 2005, UPPER('Especializado en técnicas de restauración de pintura y escultura antigua.'));

-- Empleado 3: Sofia Rossi (Italia)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (3, UPPER('Doctorado en Historia del Arte'), 2018, UPPER('Investigación profunda en arte renacentista italiano y curaduría de exposiciones.'));

-- Empleado 4: Marco Conti (Italia)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (4, UPPER('Posgrado en Museología Contemporánea'), 2015, UPPER('Enfoque en nuevas metodologías de exhibición y gestión de colecciones modernas.'));

-- Empleado 5: Anna Jansen (Países Bajos)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (5, UPPER('Máster en Estudios de Patrimonio y Cultura'), 2000, UPPER('Experiencia en catalogación y gestión de colecciones de arte neerlandés.'));

-- Empleado 6: Pieter Bakker (Países Bajos)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (6, UPPER('Licenciatura en Historia del Arte'), 2008, UPPER('Especialización en arte moderno y vanguardias europeas del siglo XX.'));

-- Empleado 7: Beatriz Silva (Portugal)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (7, UPPER('Grado en Historia del Arte y Curaduría'), 2012, UPPER('Formación en la teoría y práctica de la curaduría y gestión de exposiciones.'));

-- Empleado 8: João Ferreira (Portugal)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (8, UPPER('Doctorado en Arte Barroco Portugués'), 2016, UPPER('Investigador y curador experto en el arte de la época dorada portuguesa.'));

-- Empleado 9: Miguel Martins (Portugal)
INSERT INTO FORMACIONES_PROFESIONALES (num_expediente, nombre_titulo, anio, descripcion_especialidad)
VALUES (9, UPPER('Máster en Estudios Curatoriales y Crítica de Arte'), 2020, UPPER('Enfoque en la interpretación, crítica y presentación de obras de arte en contextos museísticos.'));




                                                        --20--                                
-------------------------------------------| ESTRUCTURAS_ORGANIZACIONALES |-------------------------------------------------------------------------------
INSERT INTO ESTRUCTURAS_ORGANIZACIONALES (id_museo, nombre, tipo, descripcion, nivel)
VALUES 
(1, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(2, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(3, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(4, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(5, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(6, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(7, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(8, 'DIRECCIÓN DE COLECCIONES', 'D', 'GESTIÓN Y CURADURÍA DE COLECCIONES', 1),
(8, 'DEPARTAMENTO DE INVESTIGACIÓN', 'D', 'INVESTIGACIÓN DE OBRAS ADQUIRIDAS', 1);




                                                        --21--                                
-----------------------------------------------| HISTORICOS_EMPLEADOS |----------------------------------------------------------------------------------
-- Empleado 1 (Elena García Ruiz) para Museo 1 (Reina Sofía) - Curadora
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (1, 1, 1, '2020-01-10', NULL, 'C');

-- Empleado 2 (Carlos López Fernández) para Museo 2 (Thyssen-Bornemisza) - Restaurador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (2, 2, 2, '2021-05-20', NULL, 'R');

-- Empleado 3 (Sofia Rossi Bianchi) para Museo 3 (La Galleria Nazionale) - Curadora
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (3, 3, 3, '2022-03-01', '2023-08-12', 'C');

-- Empleado 4 (Marco Conti Ferrari) para Museo 4 (Pinacoteca di Brera) - Curador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (4, 4, 4, '2022-08-15', NULL, 'C');

-- Empleado 5 (Anna Jansen de Boer) para Museo 5 (Rijksmuseum) - Curadora
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (5, 5, 5, '2023-02-01', NULL, 'C');

-- Empleado 6 (Pieter Bakker Visser) para Museo 6 (Kunstmuseum Den Haag) - Curador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (6, 6, 6, '2023-06-01', '2024-12-31', 'C');

-- Empleado 7 (Beatriz Silva Costa) para Museo 7 (MNAA) - Curador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (7, 7, 7, '2024-04-10', NULL, 'C');

-- Empleado 8 (João Ferreira Mendes) para Museo 8 (Soares dos Reis) - Curador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (8, 8, 8, '2024-11-01', NULL, 'C');

-- Empleado 9 (Miguel Sousa	Martins	Pereira) para Museo 8 (Soares dos Reis) - Curador
INSERT INTO HISTORICOS_EMPLEADOS (id_museo, id_estructura_org, num_expediente, fecha_inicio, fecha_fin, cargo)
VALUES (8, 8, 9, '2024-12-01', NULL, 'C');



                                                        --22--                                
----------------------------------------------------| COLECCIONES |------------------------------------------------------------------------------------
-- Museo 1: Reina Sofía
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(1, 1, 'VANGUARDIAS HISTÓRICAS', 'OBRAS EMBLEMÁTICAS DE LAS VANGUARDIAS EUROPEAS DEL SIGLO XX', 'VANGUARDIAS', 1),
(1, 1, 'SURREALISMO Y VANGUARDIAS INTERNACIONALES', 'OBRAS DESTACADAS DEL MOVIMIENTO SURREALISTA', 'SURREALISMO', 2),
(1, 1, 'ARTE CONTEMPORÁNEO Y ESCULTURA', 'OBRAS ESCULTÓRICAS Y PICTÓRICAS DE TENDENCIAS ACTUALES', 'CONTEMPORÁNEO', 3);

-- Museo 2: Thyssen-Bornemisza
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(2, 2, 'RENACIMIENTO Y BARROCO', 'PINTURA RELIGIOSA Y CLÁSICA EUROPEA DE LOS SIGLOS XV AL XVII', 'RENACIMIENTO', 1),
(2, 2, 'ROMANTICISMO Y REALISMO', 'OBRAS DEL SIGLO XIX CON TEMÁTICA SOCIAL Y POLÍTICA', 'ROMANTICISMO', 2),
(2, 2, 'ESCULTURA CLÁSICA Y MODERNA', 'OBRAS ESCULTÓRICAS REPRESENTATIVAS DE DIVERSOS ESTILOS', 'ESCULTURA', 3);

-- Museo 3: La Galleria Nazionale
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(3, 3, 'ARTE DEL SIGLO XIX', 'OBRAS NEOCLÁSICAS Y ROMÁNTICAS ITALIANAS', 'NEOCLÁSICO', 1),
(3, 3, 'REALISMO Y SIMBOLISMO ITALIANO', 'OBRAS CON CARGA SOCIAL Y SIMBÓLICA', 'SIMBOLISMO', 2),
(3, 3, 'ARTE MODERNO Y VANGUARDIAS', 'PINTURA MODERNA E INNOVADORA DEL SIGLO XX', 'VANGUARDIA', 3);

-- Museo 4: Pinacoteca di Brera
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(4, 4, 'RENACIMIENTO ITALIANO', 'PINTURA RELIGIOSA RENACENTISTA', 'RENACIMIENTO', 1),
(4, 4, 'MANIERISMO Y BARROCO', 'OBRAS CON INTENSIDAD EMOCIONAL Y DRAMÁTICA', 'BARROCO', 2),
(4, 4, 'SIGLO XIX Y PRINCIPIOS DEL XX', 'OBRAS CON TEMAS MODERNOS Y POSTROMÁNTICOS', 'SIGLO XIX', 3);

-- Museo 6: Kunstmuseum Den Haag
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(6, 6, 'ARTE NEERLANDÉS DEL SIGLO XIX', 'REALISMO Y ROMANTICISMO HOLANDÉS', 'SIGLO XIX', 1),
(6, 6, 'ARTE MODERNO Y VANGUARDIAS', 'OBRAS DE PINTORES INFLUYENTES DEL SIGLO XX', 'MODERNO', 2);

-- Museo 7: MNAA
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(7, 7, 'PINTURA PORTUGUESA Y EUROPEA DEL RENACIMIENTO Y BARROCO', 'OBRAS CLAVES DEL PATRIMONIO RELIGIOSO Y CLÁSICO', 'BARROCO', 1),
(7, 7, 'ESCULTURA RELIGIOSA Y CLÁSICA', 'ESCULTURAS DE TEMÁTICA SACRA', 'ESCULTURA', 2);

-- Museo 8: Museu Nacional Soares dos Reis
INSERT INTO COLECCIONES (id_museo, id_estructura_org, nombre_coleccion, descripcion_caracteristicas, palabra_clave, orden_recorrido)
VALUES
(8, 8, 'PINTURA PORTUGUESA DEL SIGLO XIX Y XX', 'PAISAJES Y RETRATOS DE PINTORES PORTUGUESES', 'PINTURA', 1),
(8, 8, 'ESCULTURA CLÁSICA PORTUGUESA', 'ESCULTURAS DE GRANDES MAESTROS PORTUGUESES', 'ESCULTURA', 2);




                                                        --23--                                
------------------------------------------------| COLECCIONES_SALAS |------------------------------------------------------------------------------------
--- Museo 1: Reina Sofía (id_museo = 1)
-- Colección 1: VANGUARDIAS HISTÓRICAS 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 1, 37, 1, 2); -- Sala 206
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 1, 37, 2, 1); -- Sala 201 
-- Colección 2: SURREALISMO Y VANGUARDIAS INTERNACIONALES
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 2, 37, 3, 2); -- Sala 205 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 2, 37, 1, 1); -- Sala 206
-- Colección 3: ARTE CONTEMPORÁNEO Y ESCULTURA 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 3, 38, 4, 1); -- Sala 401
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (1, 1, 3, 38, 5, 2); -- Sala 402

--- Museo 2: Museo Nacional Thyssen-Bornemisza (id_museo = 2) ---
-- Colección 1: RENACIMIENTO Y BARROCO 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 4, 10, 6, 1); -- Sala 12
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 4, 10, 7, 2); -- Sala 13
-- Colección 2: ROMANTICISMO Y REALISMO 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 5, 39, 8, 1); -- Sala 29
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 5, 39, 9, 2); -- Sala 30
-- Colección 4: ESCULTURA CLÁSICA Y MODERNA 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 6, 39, 10, 2); -- Sala 33
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (2, 2, 6, 39, 11, 1); -- Sala 31

--- Museo 3: La Galleria Nazionale
-- Colección 1: ARTE DEL SIGLO XIX (NEOCLASICISMO Y ROMANTICISMO) 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (3, 3, 7, 14, 12, 1); -- Sala 2
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (3, 3, 7, 14, 13, 2); -- Sala 4
-- Colección 2: REALISMO Y SIMBOLISMO ITALIANO 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (3, 3, 8, 40, 14, 1); -- Sala 8
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (3, 3, 8, 40, 15, 2); -- Sala 10
-- Colección 3: ARTE MODERNO Y VANGUARDIAS 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (3, 3, 9, 40, 16, 1); -- Sala 14

--- Museo 4: Pinacoteca di Brera 
-- Colección 1: RENACIMIENTO ITALIANO
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 10, 41, 20, 1); -- Sala 37
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 10, 16, 17, 2); -- Sala 15
-- Colección 2: MANIERISMO Y BARROCO 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 11, 16, 18, 1); -- Sala 20
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 11, 16, 19, 2); -- Sala 7
-- Colección 3: SIGLO XIX Y PRINCIPIOS DEL XX (id_coleccion = 12, id_estructura_org = 4)
-- Obras: Figura femenina reclinada (Sala 29), Cabeza de mujer joven (Sala 30)
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 12, 41, 21, 1); -- Sala 29
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (4, 4, 12, 41, 22, 2); -- Sala 30

--- Museo 6: Kunstmuseum Den Haag (id_museo = 6) ---

-- Colección 1: ARTE MODERNO Y VANGUARDIAS
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (6, 6, 14, 43, 25, 1); -- Sala Impresionistas
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (6, 6, 14, 26, 23, 2); -- Sala Arte Simbólico
-- Colección 2: ARTE NEERLANDÉS DEL SIGLO XIX 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (6, 6, 13, 26, 24, 1); -- Sala Realismo
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (6, 6, 13, 43, 25, 2); -- Sala Impresionistas

--- Museo 7: Museu Nacional de Arte Antiga (MNAA)
-- Colección 1: PINTURA PORTUGUESA Y EUROPEA DEL RENACIMIENTO Y BARROCO 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (7, 7, 15, 32, 26, 1); -- Sala 1
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (7, 7, 15, 32, 27, 2); -- Sala 5
-- Colección 2: ESCULTURA RELIGIOSA Y CLÁSICA 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (7, 7, 16, 32, 28, 1); -- Sala 10
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (7, 7, 16, 32, 29, 2); -- Sala 11

--- Museo 8: Museu Nacional Soares dos Reis 
-- Colección 1: PINTURA PORTUGUESA DEL SIGLO XIX Y XX 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (8, 8, 17, 36, 30, 1); -- Sala 3
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (8, 8, 17, 36, 31, 2); -- Sala 4
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (8, 8, 17, 36, 32, 3); -- Sala 5
-- Colección 2: ESCULTURA CLÁSICA PORTUGUESA 
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (8, 8, 18, 36, 33, 1); -- Sala de escultura
INSERT INTO COLECCIONES_SALAS (id_museo, id_estructura_org, id_coleccion, id_estructura_fis, id_sala, orden_recorrido) VALUES (8, 8, 18, 44, 34, 2); -- Sala de escultura moderna




                                                        --24--                                
----------------------------------------------| HISTORICOS_MOVIMIENTOS |--------------------------------------------------------------------------------
-- Museo 1: Reina Sofía 
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 1, '1992-07-26', 'A', TRUE, 1, 99999999.99, 37, 1, 1, 1, 1, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 2, '1992-07-26', 'A', TRUE, 2, 10000000.00, 37, 2, 1, 1, 1, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 3, '1992-07-26', 'A', TRUE, 1, 20000000.00, 37, 3, 1, 2, 1, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 4, '1994-05-12', 'C', TRUE, 2, 100000000.00, 37, 1, 1, 2, 1, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 5, '1993-02-10', 'A', TRUE, 1, 600000.00, 38, 4, 1, 3, 1, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(1, 6, '1995-11-20', 'C', TRUE, 2, 850000.00, 38, 5, 1, 3, 1, NULL, NULL);

-- Museo 2: Thyssen-Bornemisza
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 7, '1993-10-08', 'A', TRUE, 1, 110000000.00, 10, 6, 2, 4, 2, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 8, '1993-10-08', 'A', FALSE, NULL, 8000000.00, 10, 7, 2, 4, 2, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 9, '1993-10-08', 'A', FALSE, NULL, 15000000.00, 39, 8, 2, 5, 2, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 10, '1993-10-08', 'A', TRUE, 1, 35000000.00, 39, 9, 2, 5, 2, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 11, '1993-10-08', 'A', FALSE, NULL, 4000000.00, 39, 10, 2, 6, 2, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(2, 12, '1993-10-08', 'A', TRUE, 1, 6000000.00, 39, 11, 2, 6, 2, NULL, NULL);

-- Museo 3: La Galleria Nazionale
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 13, '1915-05-15', 'A', TRUE, 1, 18000000.00, 14, 12, 3, 7, 3, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 14, '1915-05-15', 'A', FALSE, NULL, 8000000.00, 14, 13, 3, 7, 3, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 15, '1915-05-15', 'A', TRUE, 1, 12000000.00, 40, 14, 3, 8, 3, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 16, '1915-05-15', 'A', TRUE, 2, 16000000.00, 40, 15, 3, 8, 3, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 17, '1915-05-15', 'A', FALSE, NULL, 10000000.00, 40, 16, 3, 9, 3, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(3, 18, '1915-05-15', 'A', FALSE, NULL, 11000000.00, 40, 16, 3, 9, 3, NULL, NULL);

-- Museo 4: Pinacoteca di Brera
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 19, '1859-01-01', 'A', TRUE, 1, 90000000.00, 41, 20, 4, 10, 4, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 20, '1809-08-15', 'A', TRUE, 2, 100000000.00, 16, 17, 4, 10, 4, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 21, '1809-08-15', 'A', FALSE, NULL, 25000000.00, 16, 18, 4, 11, 4, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 22, '1809-08-15', 'A', FALSE, NULL, 35000000.00, 16, 19, 4, 11, 4, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 23, '1903-01-01', 'A', FALSE, NULL, 4000000.00, 41, 21, 4, 12, 4, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(4, 24, '1903-01-01', 'A', FALSE, NULL, 5000000.00, 41, 22, 4, 12, 4, NULL, NULL);

--Museo 6: Kunstmuseum Den Haag
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(6, 25, '1935-05-29', 'A', FALSE, NULL, 5000000.00, 43, 25, 6, 14, 6, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(6, 26, '1935-05-29', 'A', FALSE, NULL, 3000000.00, 26, 23, 6, 13, 6, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(6, 27, '1935-05-29', 'A', FALSE, NULL, 4000000.00, 26, 24, 6, 14, 6, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(6, 28, '1935-05-29', 'A', FALSE, NULL, 4500000.00, 43, 25, 6, 14, 6, NULL, NULL);

-- Museo 7: Museu Nacional de Arte Antiga (MNAA)
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(7, 29, '1884-05-11', 'A', TRUE, 1, 99999999.99, 32, 26, 7, 15, 7, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(7, 30, '1884-05-11', 'A', TRUE, 2, 90000000.00, 32, 27, 7, 15, 7, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(7, 31, '1884-05-11', 'A', TRUE, 1, 2000000.00, 32, 28, 7, 16, 7, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(7, 32, '1884-05-11', 'A', FALSE, NULL, 1200000.00, 32, 29, 7, 16, 7, NULL, NULL);

-- Museo 8: Museu Nacional Soares dos Reis
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 33, '1942-01-01', 'A', TRUE, 1, 2000000.00, 36, 30, 8, 17, 8, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 34, '1942-01-01', 'A', TRUE, 2, 1500000.00, 36, 31, 8, 17, 8, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 35, '1942-01-01', 'A', FALSE, NULL, 800000.00, 36, 32, 8, 17, 8, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 36, '1942-01-01', 'A', FALSE, NULL, 600000.00, 36, 33, 8, 18, 8, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 37, '1942-01-01', 'A', FALSE, NULL, 750000.00, 44, 34, 8, 18, 8, NULL, NULL);
INSERT INTO HISTORICOS_MOVIMIENTOS (id_museo, id_obra, fecha_inicio, tipo_llegada, destacada, orden_recomendado, valor_monetario, id_estructura_fis, id_sala, id_estructura_org, id_coleccion, num_expediente, id_museo_origen, fecha_fin) VALUES
(8, 38, '1942-01-01', 'A', FALSE, NULL, 1000000.00, 36, 33, 8, 18, 8, NULL, NULL);



                                                        --25--                                
---------------------------------------------| MANTENIMIENTOS_ASIGNADOS |------------------------------------------------------------------------------

-- GUERNICA
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 1, 1, 'Limpieza superficial anual', 'A', 'C');

-- LA MUJER EN AZUL
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 2, 2, 'Revisión de craqueladuras en la pintura', 'M', 'R');

-- EL ROSTRO DEL GRAN MASTURBADOR
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 3, 3, 'Control de aparición de hongos en el lienzo', 'S', 'O');

-- CABEZA DE MUJER LLORANDO
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 4, 4, 'Limpieza de marco', 'M', 'C');

-- RETRATO DE RAMÓN GÓMEZ DE LA SERNA
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 5, 5, 'Pulido y revisión de pátina en bronce', 'D', 'O');

-- TORSO DE MUJER
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (1, 6, 6, 'Inspección de corrosión en hierro forjado', 'S', 'R');

-- SANTA CATALINA DE ALEJANDRÍA
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (2, 7, 7, 'Revisión de barniz protector', 'A', 'C');

-- SAN JERÓNIMO PENITENTE
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (2, 8, 8, 'Evaluación de desprendimientos de capa pictórica', 'M', 'O');

-- EL TESTAMENTO DE ISABEL LA CATÓLICA
INSERT INTO MANTENIMIENTOS_ASIGNADOS (id_museo, id_obra, id_cat_museo, actividad, frecuencia, tipo_responsable)
VALUES (2, 9, 9, 'Consolidación de soporte de tela', 'S', 'R');

                                                        --26--                                
---------------------------------------------| REGISTROS_ACT_REALIZADAS |-------------------------------------------------------------------------------

-- GUERNICA (Museo 1, Obra 1, id_cat_museo 1, id_mant_asig 1)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 1, 1, 1, 1, '2024-01-10', '2024-01-12', 'Limpieza realizada sin incidencias.');

-- LA MUJER EN AZUL (Museo 1, Obra 2, id_cat_museo 2, id_mant_asig 2)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 2, 2, 2, 1, '2024-02-15', '2024-02-16', 'Se detectaron pequeñas craqueladuras, se recomienda seguimiento.');

-- EL ROSTRO DEL GRAN MASTURBADOR (Museo 1, Obra 3, id_cat_museo 3, id_mant_asig 3)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 3, 3, 3, 1, '2024-03-05', '2024-03-06', 'No se observaron hongos en el lienzo.');

-- CABEZA DE MUJER LLORANDO (Museo 1, Obra 4, id_cat_museo 4, id_mant_asig 4)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 4, 4, 4, 1, '2024-04-01', '2024-04-01', 'Limpieza de marco completada.');

-- RETRATO DE RAMÓN GÓMEZ DE LA SERNA (Museo 1, Obra 5, id_cat_museo 5, id_mant_asig 5)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 5, 5, 5, 1, '2024-05-10', '2024-05-10', 'Pátina en buen estado, sin alteraciones.');

-- TORSO DE MUJER (Museo 1, Obra 6, id_cat_museo 6, id_mant_asig 6)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (1, 6, 6, 6, 1, '2024-06-12', '2024-06-13', 'No se detectó corrosión en el hierro.');

-- SANTA CATALINA DE ALEJANDRÍA (Museo 2, Obra 7, id_cat_museo 7, id_mant_asig 7)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (2, 7, 7, 7, 2, '2024-07-01', '2024-07-02', 'Barniz protector en condiciones óptimas.');

-- SAN JERÓNIMO PENITENTE (Museo 2, Obra 8, id_cat_museo 8, id_mant_asig 8)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (2, 8, 8, 8, 2, '2024-08-10', '2024-08-11', 'Desprendimientos mínimos, restauración no necesaria.');

-- EL TESTAMENTO DE ISABEL LA CATÓLICA (Museo 2, Obra 9, id_cat_museo 9, id_mant_asig 9)
INSERT INTO REGISTROS_ACT_REALIZADAS (id_museo, id_obra, id_cat_museo, id_mant_asig, num_expediente, fecha_inicio, fecha_fin, observaciones)
VALUES (2, 9, 9, 9, 2, '2024-09-05', '2024-09-06', 'Soporte de tela consolidado correctamente.');


